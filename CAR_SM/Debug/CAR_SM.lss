
CAR_SM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001640  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  00001640  000016d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000041  00800086  00800086  000016fa  2**0
                  ALLOC
  3 .stab         00001bcc  00000000  00000000  000016fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  000032c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00003850  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ab3  00000000  00000000  000039f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095a  00000000  00000000  000054a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000095b  00000000  00000000  00005dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009d8  00000000  00000000  00006758  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000777  00000000  00000000  00007130  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d7a  00000000  00000000  000078a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 8b 02 	jmp	0x516	; 0x516 <__vector_1>
       8:	0c 94 b2 02 	jmp	0x564	; 0x564 <__vector_2>
       c:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__vector_3>
      10:	0c 94 00 03 	jmp	0x600	; 0x600 <__vector_4>
      14:	0c 94 27 03 	jmp	0x64e	; 0x64e <__vector_5>
      18:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__vector_6>
      1c:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__vector_7>
      20:	0c 94 9c 03 	jmp	0x738	; 0x738 <__vector_8>
      24:	0c 94 c3 03 	jmp	0x786	; 0x786 <__vector_9>
      28:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <__vector_10>
      2c:	0c 94 11 04 	jmp	0x822	; 0x822 <__vector_11>
      30:	0c 94 38 04 	jmp	0x870	; 0x870 <__vector_12>
      34:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__vector_13>
      38:	0c 94 86 04 	jmp	0x90c	; 0x90c <__vector_14>
      3c:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__vector_15>
      40:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__vector_16>
      44:	0c 94 fb 04 	jmp	0x9f6	; 0x9f6 <__vector_17>
      48:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__vector_18>
      4c:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__vector_19>
      50:	0c 94 70 05 	jmp	0xae0	; 0xae0 <__vector_20>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e4       	ldi	r30, 0x40	; 64
      68:	f6 e1       	ldi	r31, 0x16	; 22
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3c       	cpi	r26, 0xC7	; 199
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 97 05 	call	0xb2e	; 0xb2e <main>
      8a:	0c 94 1e 0b 	jmp	0x163c	; 0x163c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Car_SM_Init>:
#include "car_sm.h"
extern uint32_t Distance;
ERROR_STATUS Car_SM_Init(void)
{

Steering_Init();
      92:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <Steering_Init>
Us_Init();
      96:	0e 94 3b 09 	call	0x1276	; 0x1276 <Us_Init>

}
      9a:	08 95       	ret

0000009c <Car_SM_Update>:


ERROR_STATUS Car_SM_Update(void)
{
Us_Trigger();
      9c:	0e 94 44 09 	call	0x1288	; 0x1288 <Us_Trigger>
Us_GetDistance(&Distance);
      a0:	8b e9       	ldi	r24, 0x9B	; 155
      a2:	90 e0       	ldi	r25, 0x00	; 0
      a4:	0e 94 4d 09 	call	0x129a	; 0x129a <Us_GetDistance>
if(Distance <= 30)
      a8:	80 91 9b 00 	lds	r24, 0x009B
      ac:	90 91 9c 00 	lds	r25, 0x009C
      b0:	a0 91 9d 00 	lds	r26, 0x009D
      b4:	b0 91 9e 00 	lds	r27, 0x009E
      b8:	8f 31       	cpi	r24, 0x1F	; 31
      ba:	91 05       	cpc	r25, r1
      bc:	a1 05       	cpc	r26, r1
      be:	b1 05       	cpc	r27, r1
      c0:	28 f4       	brcc	.+10     	; 0xcc <Car_SM_Update+0x30>
{
	
Steering_SteerCar(CAR_RIGHT,30);	
      c2:	83 e0       	ldi	r24, 0x03	; 3
      c4:	6e e1       	ldi	r22, 0x1E	; 30
      c6:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <Steering_SteerCar>
      ca:	08 95       	ret
}else
{
	Steering_SteerCar(CAR_FORWARD,30);
      cc:	81 e0       	ldi	r24, 0x01	; 1
      ce:	6e e1       	ldi	r22, 0x1E	; 30
      d0:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <Steering_SteerCar>
}	
}	
      d4:	08 95       	ret

000000d6 <DIO_init>:
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{	uint8_t RET=0;
      d6:	fc 01       	movw	r30, r24
		switch(DIO_info->dir)
      d8:	82 81       	ldd	r24, Z+2	; 0x02
      da:	88 23       	and	r24, r24
      dc:	21 f0       	breq	.+8      	; 0xe6 <DIO_init+0x10>
      de:	8f 3f       	cpi	r24, 0xFF	; 255
      e0:	09 f0       	breq	.+2      	; 0xe4 <DIO_init+0xe>
      e2:	4a c0       	rjmp	.+148    	; 0x178 <DIO_init+0xa2>
      e4:	27 c0       	rjmp	.+78     	; 0x134 <DIO_init+0x5e>
			{	
		case INPUT:
		     	switch(DIO_info ->GPIO)
      e6:	80 81       	ld	r24, Z
      e8:	81 30       	cpi	r24, 0x01	; 1
      ea:	79 f0       	breq	.+30     	; 0x10a <DIO_init+0x34>
      ec:	81 30       	cpi	r24, 0x01	; 1
      ee:	30 f0       	brcs	.+12     	; 0xfc <DIO_init+0x26>
      f0:	82 30       	cpi	r24, 0x02	; 2
      f2:	91 f0       	breq	.+36     	; 0x118 <DIO_init+0x42>
      f4:	83 30       	cpi	r24, 0x03	; 3
      f6:	09 f0       	breq	.+2      	; 0xfa <DIO_init+0x24>
      f8:	41 c0       	rjmp	.+130    	; 0x17c <DIO_init+0xa6>
      fa:	15 c0       	rjmp	.+42     	; 0x126 <DIO_init+0x50>
		 		{
					case GPIOA:
						PORTA_DIR &=(~(DIO_info->pins))	;
      fc:	9a b3       	in	r25, 0x1a	; 26
      fe:	81 81       	ldd	r24, Z+1	; 0x01
     100:	80 95       	com	r24
     102:	89 23       	and	r24, r25
     104:	8a bb       	out	0x1a, r24	; 26
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
     106:	80 e0       	ldi	r24, 0x00	; 0
		case INPUT:
		     	switch(DIO_info ->GPIO)
		 		{
					case GPIOA:
						PORTA_DIR &=(~(DIO_info->pins))	;
					break;
     108:	08 95       	ret
					case GPIOB:
					PORTB_DIR &=(~(DIO_info->pins))	;
     10a:	97 b3       	in	r25, 0x17	; 23
     10c:	81 81       	ldd	r24, Z+1	; 0x01
     10e:	80 95       	com	r24
     110:	89 23       	and	r24, r25
     112:	87 bb       	out	0x17, r24	; 23
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
     114:	80 e0       	ldi	r24, 0x00	; 0
					case GPIOA:
						PORTA_DIR &=(~(DIO_info->pins))	;
					break;
					case GPIOB:
					PORTB_DIR &=(~(DIO_info->pins))	;
					break;
     116:	08 95       	ret
					case GPIOC:
					PORTC_DIR &=(~(DIO_info->pins))	;
     118:	94 b3       	in	r25, 0x14	; 20
     11a:	81 81       	ldd	r24, Z+1	; 0x01
     11c:	80 95       	com	r24
     11e:	89 23       	and	r24, r25
     120:	84 bb       	out	0x14, r24	; 20
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
     122:	80 e0       	ldi	r24, 0x00	; 0
					case GPIOB:
					PORTB_DIR &=(~(DIO_info->pins))	;
					break;
					case GPIOC:
					PORTC_DIR &=(~(DIO_info->pins))	;
					break;
     124:	08 95       	ret
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
     126:	91 b3       	in	r25, 0x11	; 17
     128:	81 81       	ldd	r24, Z+1	; 0x01
     12a:	80 95       	com	r24
     12c:	89 23       	and	r24, r25
     12e:	81 bb       	out	0x11, r24	; 17
					break;
					RET=E_OK;
				}
				RET=E_OK;
     130:	80 e0       	ldi	r24, 0x00	; 0
					case GPIOC:
					PORTC_DIR &=(~(DIO_info->pins))	;
					break;
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
     132:	08 95       	ret
				}
				RET=E_OK;
				break;

		case OUTPUT:
			  switch(DIO_info ->GPIO)
     134:	80 81       	ld	r24, Z
     136:	81 30       	cpi	r24, 0x01	; 1
     138:	69 f0       	breq	.+26     	; 0x154 <DIO_init+0x7e>
     13a:	81 30       	cpi	r24, 0x01	; 1
     13c:	28 f0       	brcs	.+10     	; 0x148 <DIO_init+0x72>
     13e:	82 30       	cpi	r24, 0x02	; 2
     140:	79 f0       	breq	.+30     	; 0x160 <DIO_init+0x8a>
     142:	83 30       	cpi	r24, 0x03	; 3
     144:	e9 f4       	brne	.+58     	; 0x180 <DIO_init+0xaa>
     146:	12 c0       	rjmp	.+36     	; 0x16c <DIO_init+0x96>
			  {
				  case GPIOA:
				  PORTA_DIR |=(DIO_info->pins)	;
     148:	9a b3       	in	r25, 0x1a	; 26
     14a:	81 81       	ldd	r24, Z+1	; 0x01
     14c:	89 2b       	or	r24, r25
     14e:	8a bb       	out	0x1a, r24	; 26
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
     150:	80 e0       	ldi	r24, 0x00	; 0
		case OUTPUT:
			  switch(DIO_info ->GPIO)
			  {
				  case GPIOA:
				  PORTA_DIR |=(DIO_info->pins)	;
				  break;
     152:	08 95       	ret
				  case GPIOB:
				  PORTB_DIR |=(DIO_info->pins)	;
     154:	97 b3       	in	r25, 0x17	; 23
     156:	81 81       	ldd	r24, Z+1	; 0x01
     158:	89 2b       	or	r24, r25
     15a:	87 bb       	out	0x17, r24	; 23
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
     15c:	80 e0       	ldi	r24, 0x00	; 0
				  case GPIOA:
				  PORTA_DIR |=(DIO_info->pins)	;
				  break;
				  case GPIOB:
				  PORTB_DIR |=(DIO_info->pins)	;
				  break;
     15e:	08 95       	ret
				  case GPIOC:
				  PORTC_DIR |=(DIO_info->pins)	;
     160:	94 b3       	in	r25, 0x14	; 20
     162:	81 81       	ldd	r24, Z+1	; 0x01
     164:	89 2b       	or	r24, r25
     166:	84 bb       	out	0x14, r24	; 20
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
     168:	80 e0       	ldi	r24, 0x00	; 0
				  case GPIOB:
				  PORTB_DIR |=(DIO_info->pins)	;
				  break;
				  case GPIOC:
				  PORTC_DIR |=(DIO_info->pins)	;
				  break;
     16a:	08 95       	ret
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
     16c:	91 b3       	in	r25, 0x11	; 17
     16e:	81 81       	ldd	r24, Z+1	; 0x01
     170:	89 2b       	or	r24, r25
     172:	81 bb       	out	0x11, r24	; 17
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
     174:	80 e0       	ldi	r24, 0x00	; 0
				  case GPIOC:
				  PORTC_DIR |=(DIO_info->pins)	;
				  break;
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
     176:	08 95       	ret
			  }
			  RET=E_OK;
			  break;

			default:
			RET=E_NOK;
     178:	81 e0       	ldi	r24, 0x01	; 1
     17a:	08 95       	ret
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	08 95       	ret
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
     180:	80 e0       	ldi	r24, 0x00	; 0

			default:
			RET=E_NOK;
	}
return RET;
}
     182:	08 95       	ret

00000184 <DIO_Write>:

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=0;
switch(value){
     184:	44 23       	and	r20, r20
     186:	21 f0       	breq	.+8      	; 0x190 <DIO_Write+0xc>
     188:	4f 3f       	cpi	r20, 0xFF	; 255
     18a:	09 f0       	breq	.+2      	; 0x18e <DIO_Write+0xa>
     18c:	3f c0       	rjmp	.+126    	; 0x20c <DIO_Write+0x88>
     18e:	21 c0       	rjmp	.+66     	; 0x1d2 <DIO_Write+0x4e>
case LOW:
{
switch (GPIO)
     190:	81 30       	cpi	r24, 0x01	; 1
     192:	69 f0       	breq	.+26     	; 0x1ae <DIO_Write+0x2a>
     194:	81 30       	cpi	r24, 0x01	; 1
     196:	28 f0       	brcs	.+10     	; 0x1a2 <DIO_Write+0x1e>
     198:	82 30       	cpi	r24, 0x02	; 2
     19a:	79 f0       	breq	.+30     	; 0x1ba <DIO_Write+0x36>
     19c:	83 30       	cpi	r24, 0x03	; 3
     19e:	c1 f5       	brne	.+112    	; 0x210 <DIO_Write+0x8c>
     1a0:	12 c0       	rjmp	.+36     	; 0x1c6 <DIO_Write+0x42>
{	case GPIOA:
	PORTA_DATA &= ~(pins);   // 0b01111111
     1a2:	8b b3       	in	r24, 0x1b	; 27
     1a4:	60 95       	com	r22
     1a6:	68 23       	and	r22, r24
     1a8:	6b bb       	out	0x1b, r22	; 27
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
     1aa:	80 e0       	ldi	r24, 0x00	; 0
{
switch (GPIO)
{	case GPIOA:
	PORTA_DATA &= ~(pins);   // 0b01111111
Ret=E_OK;
	break;
     1ac:	08 95       	ret
	case GPIOB:
	PORTB_DATA &= ~(pins);
     1ae:	88 b3       	in	r24, 0x18	; 24
     1b0:	60 95       	com	r22
     1b2:	68 23       	and	r22, r24
     1b4:	68 bb       	out	0x18, r22	; 24
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
     1b6:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOB:
	PORTB_DATA &= ~(pins);
Ret=E_OK;
	break;
     1b8:	08 95       	ret
	case GPIOC:
	PORTC_DATA &= ~(pins);
     1ba:	85 b3       	in	r24, 0x15	; 21
     1bc:	60 95       	com	r22
     1be:	68 23       	and	r22, r24
     1c0:	65 bb       	out	0x15, r22	; 21
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
     1c2:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOC:
	PORTC_DATA &= ~(pins);
Ret=E_OK;
	break;
     1c4:	08 95       	ret
	case GPIOD:
	PORTD_DATA &= ~(pins);
     1c6:	82 b3       	in	r24, 0x12	; 18
     1c8:	60 95       	com	r22
     1ca:	68 23       	and	r22, r24
     1cc:	62 bb       	out	0x12, r22	; 18
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
     1ce:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOD:
	PORTD_DATA &= ~(pins);
	Ret=E_OK;
	break;
     1d0:	08 95       	ret
	}
Ret=E_OK;
break;
}
case HIGH:{
switch (GPIO)
     1d2:	81 30       	cpi	r24, 0x01	; 1
     1d4:	61 f0       	breq	.+24     	; 0x1ee <DIO_Write+0x6a>
     1d6:	81 30       	cpi	r24, 0x01	; 1
     1d8:	28 f0       	brcs	.+10     	; 0x1e4 <DIO_Write+0x60>
     1da:	82 30       	cpi	r24, 0x02	; 2
     1dc:	69 f0       	breq	.+26     	; 0x1f8 <DIO_Write+0x74>
     1de:	83 30       	cpi	r24, 0x03	; 3
     1e0:	c9 f4       	brne	.+50     	; 0x214 <DIO_Write+0x90>
     1e2:	0f c0       	rjmp	.+30     	; 0x202 <DIO_Write+0x7e>
{	case GPIOA:
	PORTA_DATA |=(pins);
     1e4:	8b b3       	in	r24, 0x1b	; 27
     1e6:	68 2b       	or	r22, r24
     1e8:	6b bb       	out	0x1b, r22	; 27
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
     1ea:	80 e0       	ldi	r24, 0x00	; 0
case HIGH:{
switch (GPIO)
{	case GPIOA:
	PORTA_DATA |=(pins);
Ret=E_OK;
	break;
     1ec:	08 95       	ret
	case GPIOB:
	PORTB_DATA |=(pins);
     1ee:	88 b3       	in	r24, 0x18	; 24
     1f0:	68 2b       	or	r22, r24
     1f2:	68 bb       	out	0x18, r22	; 24
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
     1f4:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOB:
	PORTB_DATA |=(pins);
Ret=E_OK;
	break;
     1f6:	08 95       	ret
	case GPIOC:
	PORTC_DATA |=(pins);
     1f8:	85 b3       	in	r24, 0x15	; 21
     1fa:	68 2b       	or	r22, r24
     1fc:	65 bb       	out	0x15, r22	; 21
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
     1fe:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOC:
	PORTC_DATA |=(pins);
Ret=E_OK;
	break;
     200:	08 95       	ret
	case GPIOD:
	PORTD_DATA |=(pins);
     202:	82 b3       	in	r24, 0x12	; 18
     204:	68 2b       	or	r22, r24
     206:	62 bb       	out	0x12, r22	; 18
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
     208:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOD:
	PORTD_DATA |=(pins);
Ret=E_OK;
	break;
     20a:	08 95       	ret
}
Ret=E_OK;
break;
}
default:
Ret=E_NOK;
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	08 95       	ret
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	08 95       	ret
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
     214:	80 e0       	ldi	r24, 0x00	; 0
default:
Ret=E_NOK;
break;
}
return Ret;
}
     216:	08 95       	ret

00000218 <DIO_Read>:


ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{
     218:	fa 01       	movw	r30, r20

switch (GPIO)
     21a:	81 30       	cpi	r24, 0x01	; 1
     21c:	59 f0       	breq	.+22     	; 0x234 <DIO_Read+0x1c>
     21e:	81 30       	cpi	r24, 0x01	; 1
     220:	28 f0       	brcs	.+10     	; 0x22c <DIO_Read+0x14>
     222:	82 30       	cpi	r24, 0x02	; 2
     224:	59 f0       	breq	.+22     	; 0x23c <DIO_Read+0x24>
     226:	83 30       	cpi	r24, 0x03	; 3
     228:	81 f4       	brne	.+32     	; 0x24a <DIO_Read+0x32>
     22a:	0c c0       	rjmp	.+24     	; 0x244 <DIO_Read+0x2c>
{	case GPIOA:
	*data=(PORTA_PIN & pins);
     22c:	89 b3       	in	r24, 0x19	; 25
     22e:	68 23       	and	r22, r24
     230:	60 83       	st	Z, r22
	break;
     232:	0b c0       	rjmp	.+22     	; 0x24a <DIO_Read+0x32>
	case GPIOB:
	*data=(PORTB_PIN & pins);
     234:	86 b3       	in	r24, 0x16	; 22
     236:	68 23       	and	r22, r24
     238:	60 83       	st	Z, r22
	break;
     23a:	07 c0       	rjmp	.+14     	; 0x24a <DIO_Read+0x32>
	case GPIOC:
	*data=(PORTC_PIN & pins);
     23c:	83 b3       	in	r24, 0x13	; 19
     23e:	68 23       	and	r22, r24
     240:	60 83       	st	Z, r22
	break;
     242:	03 c0       	rjmp	.+6      	; 0x24a <DIO_Read+0x32>
	case GPIOD:
	*data=(PORTD_PIN & pins);
     244:	80 b3       	in	r24, 0x10	; 16
     246:	68 23       	and	r22, r24
     248:	60 83       	st	Z, r22
	break;
}
if(*data > 0)
     24a:	80 81       	ld	r24, Z
     24c:	88 23       	and	r24, r24
     24e:	11 f0       	breq	.+4      	; 0x254 <DIO_Read+0x3c>
{
	*data = 1;
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	80 83       	st	Z, r24
}


}
     254:	08 95       	ret

00000256 <DIO_Toggle>:
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
uint8_t ret=0;
	switch (GPIO)
     256:	81 30       	cpi	r24, 0x01	; 1
     258:	61 f0       	breq	.+24     	; 0x272 <DIO_Toggle+0x1c>
     25a:	81 30       	cpi	r24, 0x01	; 1
     25c:	28 f0       	brcs	.+10     	; 0x268 <DIO_Toggle+0x12>
     25e:	82 30       	cpi	r24, 0x02	; 2
     260:	69 f0       	breq	.+26     	; 0x27c <DIO_Toggle+0x26>
     262:	83 30       	cpi	r24, 0x03	; 3
     264:	a9 f4       	brne	.+42     	; 0x290 <DIO_Toggle+0x3a>
     266:	0f c0       	rjmp	.+30     	; 0x286 <DIO_Toggle+0x30>
	{	case GPIOA:
		PORTA_DATA ^=(pins);
     268:	8b b3       	in	r24, 0x1b	; 27
     26a:	68 27       	eor	r22, r24
     26c:	6b bb       	out	0x1b, r22	; 27
		ret=E_OK;
     26e:	80 e0       	ldi	r24, 0x00	; 0
		break;
     270:	08 95       	ret
		case GPIOB:
		PORTB_DATA ^=(pins);
     272:	88 b3       	in	r24, 0x18	; 24
     274:	68 27       	eor	r22, r24
     276:	68 bb       	out	0x18, r22	; 24
ret=E_OK;
     278:	80 e0       	ldi	r24, 0x00	; 0
		break;
     27a:	08 95       	ret
		case GPIOC:
		PORTC_DATA ^=(pins);
     27c:	85 b3       	in	r24, 0x15	; 21
     27e:	68 27       	eor	r22, r24
     280:	65 bb       	out	0x15, r22	; 21
ret=E_OK;
     282:	80 e0       	ldi	r24, 0x00	; 0
		break;
     284:	08 95       	ret
		case GPIOD:
		PORTD_DATA ^=(pins);
     286:	82 b3       	in	r24, 0x12	; 18
     288:	68 27       	eor	r22, r24
     28a:	62 bb       	out	0x12, r22	; 18
ret=E_OK;
     28c:	80 e0       	ldi	r24, 0x00	; 0
		break;
     28e:	08 95       	ret
		default:
		ret=E_NOK;
     290:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}

return ret;
}
     292:	08 95       	ret

00000294 <Icu_Init>:
static volatile uint32_t u32_Time_rising_edge=0;
static volatile uint32_t u32_Time_faling_edge=0;
static volatile uint32_t Timer_High=0;
static volatile uint32_t Timer_Low=0;
ERROR_STATUS Icu_Init(Icu_cfg_s * Icu_Cfg)
{
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	ec 01       	movw	r28, r24
	uint8_t Ret=0;
//Enable Global int
G_interrupt_Enable();
     29a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <G_interrupt_Enable>
//Enable EXTI
switch(Icu_Cfg->ICU_Ch_No)
     29e:	88 81       	ld	r24, Y
     2a0:	81 30       	cpi	r24, 0x01	; 1
     2a2:	41 f0       	breq	.+16     	; 0x2b4 <Icu_Init+0x20>
     2a4:	81 30       	cpi	r24, 0x01	; 1
     2a6:	18 f0       	brcs	.+6      	; 0x2ae <Icu_Init+0x1a>
     2a8:	82 30       	cpi	r24, 0x02	; 2
     2aa:	49 f4       	brne	.+18     	; 0x2be <Icu_Init+0x2a>
     2ac:	06 c0       	rjmp	.+12     	; 0x2ba <Icu_Init+0x26>
{
case ICU_CH0:
EX_interrupt_enable0();
     2ae:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <EX_interrupt_enable0>
break;
     2b2:	05 c0       	rjmp	.+10     	; 0x2be <Icu_Init+0x2a>
case ICU_CH1:
EX_interrupt_enable1();
     2b4:	0e 94 6f 02 	call	0x4de	; 0x4de <EX_interrupt_enable1>
break;
     2b8:	02 c0       	rjmp	.+4      	; 0x2be <Icu_Init+0x2a>
case ICU_CH2:
EX_interrupt_enable2();
     2ba:	0e 94 66 02 	call	0x4cc	; 0x4cc <EX_interrupt_enable2>
break;
}

switch(Icu_Cfg->ICU_Ch_Timer)
     2be:	89 81       	ldd	r24, Y+1	; 0x01
     2c0:	81 30       	cpi	r24, 0x01	; 1
     2c2:	51 f0       	breq	.+20     	; 0x2d8 <Icu_Init+0x44>
     2c4:	81 30       	cpi	r24, 0x01	; 1
     2c6:	18 f0       	brcs	.+6      	; 0x2ce <Icu_Init+0x3a>
     2c8:	82 30       	cpi	r24, 0x02	; 2
     2ca:	89 f4       	brne	.+34     	; 0x2ee <Icu_Init+0x5a>
     2cc:	0c c0       	rjmp	.+24     	; 0x2e6 <Icu_Init+0x52>
{
	case ICU_TIMER_CH0:
		//Enable Timer0
		TCCR0=0x03;
     2ce:	83 e0       	ldi	r24, 0x03	; 3
     2d0:	83 bf       	out	0x33, r24	; 51
		TIMSK=0x01;
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	89 bf       	out	0x39, r24	; 57
		break;
     2d6:	0b c0       	rjmp	.+22     	; 0x2ee <Icu_Init+0x5a>
	case ICU_TIMER_CH1:
		TCCR1=0x0005;
     2d8:	85 e0       	ldi	r24, 0x05	; 5
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	9f bd       	out	0x2f, r25	; 47
     2de:	8e bd       	out	0x2e, r24	; 46
		TIMSK=0x04;
     2e0:	84 e0       	ldi	r24, 0x04	; 4
     2e2:	89 bf       	out	0x39, r24	; 57
		break;
     2e4:	04 c0       	rjmp	.+8      	; 0x2ee <Icu_Init+0x5a>
	case ICU_TIMER_CH2:
		TCCR2=0x07;
     2e6:	87 e0       	ldi	r24, 0x07	; 7
     2e8:	85 bd       	out	0x25, r24	; 37
		TIMSK=0x04;
     2ea:	84 e0       	ldi	r24, 0x04	; 4
     2ec:	89 bf       	out	0x39, r24	; 57
		break;
}

return Ret;
}
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	08 95       	ret

000002f6 <Icu_ReadTime>:
 * 				  - E_OK : successful									   *
 *				  - E_NOK : not successful								   *
 * Description	: calculates the time between 2 edges				       *
 ***************************************************************************/
ERROR_STATUS Icu_ReadTime(uint8_t Icu_Channel, uint8_t Icu_EdgeToEdge, uint32_t * Icu_Time)
{
     2f6:	fa 01       	movw	r30, r20
uint8_t Ret=0;
switch(Icu_Channel)
     2f8:	81 30       	cpi	r24, 0x01	; 1
     2fa:	49 f0       	breq	.+18     	; 0x30e <Icu_ReadTime+0x18>
     2fc:	81 30       	cpi	r24, 0x01	; 1
     2fe:	18 f0       	brcs	.+6      	; 0x306 <Icu_ReadTime+0x10>
     300:	82 30       	cpi	r24, 0x02	; 2
     302:	71 f4       	brne	.+28     	; 0x320 <Icu_ReadTime+0x2a>
     304:	0a c0       	rjmp	.+20     	; 0x31a <Icu_ReadTime+0x24>
{
	case ICU_TIMER_CH0:
	TCCR0|=0x03;
     306:	83 b7       	in	r24, 0x33	; 51
     308:	83 60       	ori	r24, 0x03	; 3
     30a:	83 bf       	out	0x33, r24	; 51
	Ret=E_OK;
	break;
     30c:	09 c0       	rjmp	.+18     	; 0x320 <Icu_ReadTime+0x2a>
	case ICU_TIMER_CH1:
	TCCR1|=0x0005;
     30e:	8e b5       	in	r24, 0x2e	; 46
     310:	9f b5       	in	r25, 0x2f	; 47
     312:	85 60       	ori	r24, 0x05	; 5
     314:	9f bd       	out	0x2f, r25	; 47
     316:	8e bd       	out	0x2e, r24	; 46
	Ret=E_OK;	
	break;
     318:	03 c0       	rjmp	.+6      	; 0x320 <Icu_ReadTime+0x2a>
	case ICU_TIMER_CH2:
	TCCR2|=0x07;
     31a:	85 b5       	in	r24, 0x25	; 37
     31c:	87 60       	ori	r24, 0x07	; 7
     31e:	85 bd       	out	0x25, r24	; 37
	default:
	Ret=E_NOK;
	break;
}  

switch(Icu_EdgeToEdge)
     320:	61 30       	cpi	r22, 0x01	; 1
     322:	f9 f0       	breq	.+62     	; 0x362 <Icu_ReadTime+0x6c>
     324:	61 30       	cpi	r22, 0x01	; 1
     326:	18 f0       	brcs	.+6      	; 0x32e <Icu_ReadTime+0x38>
     328:	62 30       	cpi	r22, 0x02	; 2
     32a:	b9 f5       	brne	.+110    	; 0x39a <Icu_ReadTime+0xa4>
     32c:	28 c0       	rjmp	.+80     	; 0x37e <Icu_ReadTime+0x88>
{
	case ICU_RISE_TO_RISE:
	*Icu_Time=Timer_High+Timer_Low;
     32e:	80 91 8a 00 	lds	r24, 0x008A
     332:	90 91 8b 00 	lds	r25, 0x008B
     336:	a0 91 8c 00 	lds	r26, 0x008C
     33a:	b0 91 8d 00 	lds	r27, 0x008D
     33e:	40 91 86 00 	lds	r20, 0x0086
     342:	50 91 87 00 	lds	r21, 0x0087
     346:	60 91 88 00 	lds	r22, 0x0088
     34a:	70 91 89 00 	lds	r23, 0x0089
     34e:	84 0f       	add	r24, r20
     350:	95 1f       	adc	r25, r21
     352:	a6 1f       	adc	r26, r22
     354:	b7 1f       	adc	r27, r23
     356:	80 83       	st	Z, r24
     358:	91 83       	std	Z+1, r25	; 0x01
     35a:	a2 83       	std	Z+2, r26	; 0x02
     35c:	b3 83       	std	Z+3, r27	; 0x03
	Ret=E_OK;
     35e:	80 e0       	ldi	r24, 0x00	; 0
	break;
     360:	1d c0       	rjmp	.+58     	; 0x39c <Icu_ReadTime+0xa6>
	case ICU_RISE_TO_FALL:
	*Icu_Time=Timer_High;
     362:	80 91 8a 00 	lds	r24, 0x008A
     366:	90 91 8b 00 	lds	r25, 0x008B
     36a:	a0 91 8c 00 	lds	r26, 0x008C
     36e:	b0 91 8d 00 	lds	r27, 0x008D
     372:	80 83       	st	Z, r24
     374:	91 83       	std	Z+1, r25	; 0x01
     376:	a2 83       	std	Z+2, r26	; 0x02
     378:	b3 83       	std	Z+3, r27	; 0x03
	Ret=E_OK;
     37a:	80 e0       	ldi	r24, 0x00	; 0
	break;
     37c:	0f c0       	rjmp	.+30     	; 0x39c <Icu_ReadTime+0xa6>
	case ICU_FALE_TO_RISE:
	*Icu_Time=Timer_Low;
     37e:	80 91 86 00 	lds	r24, 0x0086
     382:	90 91 87 00 	lds	r25, 0x0087
     386:	a0 91 88 00 	lds	r26, 0x0088
     38a:	b0 91 89 00 	lds	r27, 0x0089
     38e:	80 83       	st	Z, r24
     390:	91 83       	std	Z+1, r25	; 0x01
     392:	a2 83       	std	Z+2, r26	; 0x02
     394:	b3 83       	std	Z+3, r27	; 0x03
	Ret=E_OK;
     396:	80 e0       	ldi	r24, 0x00	; 0
	break;
     398:	01 c0       	rjmp	.+2      	; 0x39c <Icu_ReadTime+0xa6>
	
	default:
	Ret=E_NOK;
     39a:	81 e0       	ldi	r24, 0x01	; 1
	break;
}
*Icu_Time=*Icu_Time * 4;
     39c:	40 81       	ld	r20, Z
     39e:	51 81       	ldd	r21, Z+1	; 0x01
     3a0:	62 81       	ldd	r22, Z+2	; 0x02
     3a2:	73 81       	ldd	r23, Z+3	; 0x03
     3a4:	44 0f       	add	r20, r20
     3a6:	55 1f       	adc	r21, r21
     3a8:	66 1f       	adc	r22, r22
     3aa:	77 1f       	adc	r23, r23
     3ac:	44 0f       	add	r20, r20
     3ae:	55 1f       	adc	r21, r21
     3b0:	66 1f       	adc	r22, r22
     3b2:	77 1f       	adc	r23, r23
     3b4:	40 83       	st	Z, r20
     3b6:	51 83       	std	Z+1, r21	; 0x01
     3b8:	62 83       	std	Z+2, r22	; 0x02
     3ba:	73 83       	std	Z+3, r23	; 0x03
return Ret;
}
     3bc:	08 95       	ret

000003be <EXTI>:

void EXTI(void)
{	u32_sgv_TimerVal=TCNT0+u8_ovf_happend*255;
     3be:	42 b7       	in	r20, 0x32	; 50
     3c0:	20 91 96 00 	lds	r18, 0x0096
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	92 2f       	mov	r25, r18
     3c8:	88 27       	eor	r24, r24
     3ca:	82 1b       	sub	r24, r18
     3cc:	93 0b       	sbc	r25, r19
     3ce:	84 0f       	add	r24, r20
     3d0:	91 1d       	adc	r25, r1
     3d2:	aa 27       	eor	r26, r26
     3d4:	97 fd       	sbrc	r25, 7
     3d6:	a0 95       	com	r26
     3d8:	ba 2f       	mov	r27, r26
     3da:	80 93 97 00 	sts	0x0097, r24
     3de:	90 93 98 00 	sts	0x0098, r25
     3e2:	a0 93 99 00 	sts	0x0099, r26
     3e6:	b0 93 9a 00 	sts	0x009A, r27
	u8_ovf_happend=0;
     3ea:	10 92 96 00 	sts	0x0096, r1
		if(READBIT(MCUCSR,6))
     3ee:	84 b7       	in	r24, 0x34	; 52
     3f0:	82 95       	swap	r24
     3f2:	86 95       	lsr	r24
     3f4:	86 95       	lsr	r24
     3f6:	83 70       	andi	r24, 0x03	; 3
     3f8:	80 ff       	sbrs	r24, 0
     3fa:	30 c0       	rjmp	.+96     	; 0x45c <EXTI+0x9e>
		{
		u32_Time_rising_edge=u32_sgv_TimerVal;
     3fc:	80 91 97 00 	lds	r24, 0x0097
     400:	90 91 98 00 	lds	r25, 0x0098
     404:	a0 91 99 00 	lds	r26, 0x0099
     408:	b0 91 9a 00 	lds	r27, 0x009A
     40c:	80 93 92 00 	sts	0x0092, r24
     410:	90 93 93 00 	sts	0x0093, r25
     414:	a0 93 94 00 	sts	0x0094, r26
     418:	b0 93 95 00 	sts	0x0095, r27
		Timer_Low = u32_Time_rising_edge - u32_Time_faling_edge;
     41c:	80 91 92 00 	lds	r24, 0x0092
     420:	90 91 93 00 	lds	r25, 0x0093
     424:	a0 91 94 00 	lds	r26, 0x0094
     428:	b0 91 95 00 	lds	r27, 0x0095
     42c:	40 91 8e 00 	lds	r20, 0x008E
     430:	50 91 8f 00 	lds	r21, 0x008F
     434:	60 91 90 00 	lds	r22, 0x0090
     438:	70 91 91 00 	lds	r23, 0x0091
     43c:	84 1b       	sub	r24, r20
     43e:	95 0b       	sbc	r25, r21
     440:	a6 0b       	sbc	r26, r22
     442:	b7 0b       	sbc	r27, r23
     444:	80 93 86 00 	sts	0x0086, r24
     448:	90 93 87 00 	sts	0x0087, r25
     44c:	a0 93 88 00 	sts	0x0088, r26
     450:	b0 93 89 00 	sts	0x0089, r27
		/*****************************************/	
		CLEAR_BIT(MCUCSR,6);   /*Make it falling*/
     454:	84 b7       	in	r24, 0x34	; 52
     456:	8f 7b       	andi	r24, 0xBF	; 191
     458:	84 bf       	out	0x34, r24	; 52
     45a:	08 95       	ret
		/***************************************/
		}else{
			u32_Time_faling_edge=u32_sgv_TimerVal;
     45c:	80 91 97 00 	lds	r24, 0x0097
     460:	90 91 98 00 	lds	r25, 0x0098
     464:	a0 91 99 00 	lds	r26, 0x0099
     468:	b0 91 9a 00 	lds	r27, 0x009A
     46c:	80 93 8e 00 	sts	0x008E, r24
     470:	90 93 8f 00 	sts	0x008F, r25
     474:	a0 93 90 00 	sts	0x0090, r26
     478:	b0 93 91 00 	sts	0x0091, r27
			Timer_High =u32_Time_faling_edge - u32_Time_rising_edge;
     47c:	80 91 8e 00 	lds	r24, 0x008E
     480:	90 91 8f 00 	lds	r25, 0x008F
     484:	a0 91 90 00 	lds	r26, 0x0090
     488:	b0 91 91 00 	lds	r27, 0x0091
     48c:	40 91 92 00 	lds	r20, 0x0092
     490:	50 91 93 00 	lds	r21, 0x0093
     494:	60 91 94 00 	lds	r22, 0x0094
     498:	70 91 95 00 	lds	r23, 0x0095
     49c:	84 1b       	sub	r24, r20
     49e:	95 0b       	sbc	r25, r21
     4a0:	a6 0b       	sbc	r26, r22
     4a2:	b7 0b       	sbc	r27, r23
     4a4:	80 93 8a 00 	sts	0x008A, r24
     4a8:	90 93 8b 00 	sts	0x008B, r25
     4ac:	a0 93 8c 00 	sts	0x008C, r26
     4b0:	b0 93 8d 00 	sts	0x008D, r27
			/*********************************/	
			SET_BIT(MCUCSR,6);		/*Make it Rising*/
     4b4:	84 b7       	in	r24, 0x34	; 52
     4b6:	80 64       	ori	r24, 0x40	; 64
     4b8:	84 bf       	out	0x34, r24	; 52
     4ba:	08 95       	ret

000004bc <timer_interrupt>:


}
void timer_interrupt(void)
{
	u8_ovf_happend=1;
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	80 93 96 00 	sts	0x0096, r24
     4c2:	08 95       	ret

000004c4 <G_interrupt_Enable>:
ptr_to_Fun TWI_I2C;
ptr_to_Fun SPM_RDY;

void G_interrupt_Enable(void)
{
 SREG |=(0x80);
     4c4:	8f b7       	in	r24, 0x3f	; 63
     4c6:	80 68       	ori	r24, 0x80	; 128
     4c8:	8f bf       	out	0x3f, r24	; 63
}
     4ca:	08 95       	ret

000004cc <EX_interrupt_enable2>:
void EX_interrupt_enable2(void)
{
CLEAR_BIT(PORTB_DIR,2);/*Input*/
     4cc:	ba 98       	cbi	0x17, 2	; 23
SET_BIT(PORTB_DATA,2);/*Pullup*/
     4ce:	c2 9a       	sbi	0x18, 2	; 24
SET_BIT(GICR,INT2);/*EXT2*/
     4d0:	8b b7       	in	r24, 0x3b	; 59
     4d2:	80 62       	ori	r24, 0x20	; 32
     4d4:	8b bf       	out	0x3b, r24	; 59
SET_BIT(MCUCSR,6);/*Rising*/
     4d6:	84 b7       	in	r24, 0x34	; 52
     4d8:	80 64       	ori	r24, 0x40	; 64
     4da:	84 bf       	out	0x34, r24	; 52
}
     4dc:	08 95       	ret

000004de <EX_interrupt_enable1>:
void EX_interrupt_enable1(void)
{
	CLEAR_BIT(PORTD_DIR,3);
     4de:	8b 98       	cbi	0x11, 3	; 17
	SET_BIT(PORTD_DATA,3);
     4e0:	93 9a       	sbi	0x12, 3	; 18
	SET_BIT(GICR,INT1);
     4e2:	8b b7       	in	r24, 0x3b	; 59
     4e4:	80 68       	ori	r24, 0x80	; 128
     4e6:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(MCUCR,2);/*Any logical change*/
     4e8:	85 b7       	in	r24, 0x35	; 53
     4ea:	84 60       	ori	r24, 0x04	; 4
     4ec:	85 bf       	out	0x35, r24	; 53
	CLEAR_BIT(MCUCR,3);
     4ee:	85 b7       	in	r24, 0x35	; 53
     4f0:	87 7f       	andi	r24, 0xF7	; 247
     4f2:	85 bf       	out	0x35, r24	; 53
	
}
     4f4:	08 95       	ret

000004f6 <EX_interrupt_enable0>:
void EX_interrupt_enable0(void)
{
	CLEAR_BIT(PORTD_DIR,2);
     4f6:	8a 98       	cbi	0x11, 2	; 17
	SET_BIT(PORTD_DATA,2);
     4f8:	92 9a       	sbi	0x12, 2	; 18
	SET_BIT(GICR,INT0);
     4fa:	8b b7       	in	r24, 0x3b	; 59
     4fc:	80 64       	ori	r24, 0x40	; 64
     4fe:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(MCUCR,0);/*Any logical change*/
     500:	85 b7       	in	r24, 0x35	; 53
     502:	81 60       	ori	r24, 0x01	; 1
     504:	85 bf       	out	0x35, r24	; 53
	CLEAR_BIT(MCUCR,1);
     506:	85 b7       	in	r24, 0x35	; 53
     508:	8d 7f       	andi	r24, 0xFD	; 253
     50a:	85 bf       	out	0x35, r24	; 53
	
}
     50c:	08 95       	ret

0000050e <G_interrupt_Disable>:
void G_interrupt_Disable(void)
{
CLEAR_BIT(SREG,7);
     50e:	8f b7       	in	r24, 0x3f	; 63
     510:	8f 77       	andi	r24, 0x7F	; 127
     512:	8f bf       	out	0x3f, r24	; 63
}
     514:	08 95       	ret

00000516 <__vector_1>:
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
     516:	1f 92       	push	r1
     518:	0f 92       	push	r0
     51a:	0f b6       	in	r0, 0x3f	; 63
     51c:	0f 92       	push	r0
     51e:	11 24       	eor	r1, r1
     520:	2f 93       	push	r18
     522:	3f 93       	push	r19
     524:	4f 93       	push	r20
     526:	5f 93       	push	r21
     528:	6f 93       	push	r22
     52a:	7f 93       	push	r23
     52c:	8f 93       	push	r24
     52e:	9f 93       	push	r25
     530:	af 93       	push	r26
     532:	bf 93       	push	r27
     534:	ef 93       	push	r30
     536:	ff 93       	push	r31
  INT0_external_interrupt();
     538:	e0 91 b7 00 	lds	r30, 0x00B7
     53c:	f0 91 b8 00 	lds	r31, 0x00B8
     540:	09 95       	icall
}
     542:	ff 91       	pop	r31
     544:	ef 91       	pop	r30
     546:	bf 91       	pop	r27
     548:	af 91       	pop	r26
     54a:	9f 91       	pop	r25
     54c:	8f 91       	pop	r24
     54e:	7f 91       	pop	r23
     550:	6f 91       	pop	r22
     552:	5f 91       	pop	r21
     554:	4f 91       	pop	r20
     556:	3f 91       	pop	r19
     558:	2f 91       	pop	r18
     55a:	0f 90       	pop	r0
     55c:	0f be       	out	0x3f, r0	; 63
     55e:	0f 90       	pop	r0
     560:	1f 90       	pop	r1
     562:	18 95       	reti

00000564 <__vector_2>:


void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
     564:	1f 92       	push	r1
     566:	0f 92       	push	r0
     568:	0f b6       	in	r0, 0x3f	; 63
     56a:	0f 92       	push	r0
     56c:	11 24       	eor	r1, r1
     56e:	2f 93       	push	r18
     570:	3f 93       	push	r19
     572:	4f 93       	push	r20
     574:	5f 93       	push	r21
     576:	6f 93       	push	r22
     578:	7f 93       	push	r23
     57a:	8f 93       	push	r24
     57c:	9f 93       	push	r25
     57e:	af 93       	push	r26
     580:	bf 93       	push	r27
     582:	ef 93       	push	r30
     584:	ff 93       	push	r31
  INT1_external_interrupt();
     586:	e0 91 bf 00 	lds	r30, 0x00BF
     58a:	f0 91 c0 00 	lds	r31, 0x00C0
     58e:	09 95       	icall
}
     590:	ff 91       	pop	r31
     592:	ef 91       	pop	r30
     594:	bf 91       	pop	r27
     596:	af 91       	pop	r26
     598:	9f 91       	pop	r25
     59a:	8f 91       	pop	r24
     59c:	7f 91       	pop	r23
     59e:	6f 91       	pop	r22
     5a0:	5f 91       	pop	r21
     5a2:	4f 91       	pop	r20
     5a4:	3f 91       	pop	r19
     5a6:	2f 91       	pop	r18
     5a8:	0f 90       	pop	r0
     5aa:	0f be       	out	0x3f, r0	; 63
     5ac:	0f 90       	pop	r0
     5ae:	1f 90       	pop	r1
     5b0:	18 95       	reti

000005b2 <__vector_3>:


void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
     5b2:	1f 92       	push	r1
     5b4:	0f 92       	push	r0
     5b6:	0f b6       	in	r0, 0x3f	; 63
     5b8:	0f 92       	push	r0
     5ba:	11 24       	eor	r1, r1
     5bc:	2f 93       	push	r18
     5be:	3f 93       	push	r19
     5c0:	4f 93       	push	r20
     5c2:	5f 93       	push	r21
     5c4:	6f 93       	push	r22
     5c6:	7f 93       	push	r23
     5c8:	8f 93       	push	r24
     5ca:	9f 93       	push	r25
     5cc:	af 93       	push	r26
     5ce:	bf 93       	push	r27
     5d0:	ef 93       	push	r30
     5d2:	ff 93       	push	r31
  INT2_external_interrupt();
     5d4:	e0 91 70 00 	lds	r30, 0x0070
     5d8:	f0 91 71 00 	lds	r31, 0x0071
     5dc:	09 95       	icall
}
     5de:	ff 91       	pop	r31
     5e0:	ef 91       	pop	r30
     5e2:	bf 91       	pop	r27
     5e4:	af 91       	pop	r26
     5e6:	9f 91       	pop	r25
     5e8:	8f 91       	pop	r24
     5ea:	7f 91       	pop	r23
     5ec:	6f 91       	pop	r22
     5ee:	5f 91       	pop	r21
     5f0:	4f 91       	pop	r20
     5f2:	3f 91       	pop	r19
     5f4:	2f 91       	pop	r18
     5f6:	0f 90       	pop	r0
     5f8:	0f be       	out	0x3f, r0	; 63
     5fa:	0f 90       	pop	r0
     5fc:	1f 90       	pop	r1
     5fe:	18 95       	reti

00000600 <__vector_4>:


void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
     600:	1f 92       	push	r1
     602:	0f 92       	push	r0
     604:	0f b6       	in	r0, 0x3f	; 63
     606:	0f 92       	push	r0
     608:	11 24       	eor	r1, r1
     60a:	2f 93       	push	r18
     60c:	3f 93       	push	r19
     60e:	4f 93       	push	r20
     610:	5f 93       	push	r21
     612:	6f 93       	push	r22
     614:	7f 93       	push	r23
     616:	8f 93       	push	r24
     618:	9f 93       	push	r25
     61a:	af 93       	push	r26
     61c:	bf 93       	push	r27
     61e:	ef 93       	push	r30
     620:	ff 93       	push	r31
TIMER2COMP();
     622:	e0 91 c5 00 	lds	r30, 0x00C5
     626:	f0 91 c6 00 	lds	r31, 0x00C6
     62a:	09 95       	icall
}
     62c:	ff 91       	pop	r31
     62e:	ef 91       	pop	r30
     630:	bf 91       	pop	r27
     632:	af 91       	pop	r26
     634:	9f 91       	pop	r25
     636:	8f 91       	pop	r24
     638:	7f 91       	pop	r23
     63a:	6f 91       	pop	r22
     63c:	5f 91       	pop	r21
     63e:	4f 91       	pop	r20
     640:	3f 91       	pop	r19
     642:	2f 91       	pop	r18
     644:	0f 90       	pop	r0
     646:	0f be       	out	0x3f, r0	; 63
     648:	0f 90       	pop	r0
     64a:	1f 90       	pop	r1
     64c:	18 95       	reti

0000064e <__vector_5>:


void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
     64e:	1f 92       	push	r1
     650:	0f 92       	push	r0
     652:	0f b6       	in	r0, 0x3f	; 63
     654:	0f 92       	push	r0
     656:	11 24       	eor	r1, r1
     658:	2f 93       	push	r18
     65a:	3f 93       	push	r19
     65c:	4f 93       	push	r20
     65e:	5f 93       	push	r21
     660:	6f 93       	push	r22
     662:	7f 93       	push	r23
     664:	8f 93       	push	r24
     666:	9f 93       	push	r25
     668:	af 93       	push	r26
     66a:	bf 93       	push	r27
     66c:	ef 93       	push	r30
     66e:	ff 93       	push	r31
  TIMER2OVF();
     670:	e0 91 a7 00 	lds	r30, 0x00A7
     674:	f0 91 a8 00 	lds	r31, 0x00A8
     678:	09 95       	icall
}
     67a:	ff 91       	pop	r31
     67c:	ef 91       	pop	r30
     67e:	bf 91       	pop	r27
     680:	af 91       	pop	r26
     682:	9f 91       	pop	r25
     684:	8f 91       	pop	r24
     686:	7f 91       	pop	r23
     688:	6f 91       	pop	r22
     68a:	5f 91       	pop	r21
     68c:	4f 91       	pop	r20
     68e:	3f 91       	pop	r19
     690:	2f 91       	pop	r18
     692:	0f 90       	pop	r0
     694:	0f be       	out	0x3f, r0	; 63
     696:	0f 90       	pop	r0
     698:	1f 90       	pop	r1
     69a:	18 95       	reti

0000069c <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
     69c:	1f 92       	push	r1
     69e:	0f 92       	push	r0
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	0f 92       	push	r0
     6a4:	11 24       	eor	r1, r1
     6a6:	2f 93       	push	r18
     6a8:	3f 93       	push	r19
     6aa:	4f 93       	push	r20
     6ac:	5f 93       	push	r21
     6ae:	6f 93       	push	r22
     6b0:	7f 93       	push	r23
     6b2:	8f 93       	push	r24
     6b4:	9f 93       	push	r25
     6b6:	af 93       	push	r26
     6b8:	bf 93       	push	r27
     6ba:	ef 93       	push	r30
     6bc:	ff 93       	push	r31
  TIMER1CAPT();
     6be:	e0 91 c1 00 	lds	r30, 0x00C1
     6c2:	f0 91 c2 00 	lds	r31, 0x00C2
     6c6:	09 95       	icall
}
     6c8:	ff 91       	pop	r31
     6ca:	ef 91       	pop	r30
     6cc:	bf 91       	pop	r27
     6ce:	af 91       	pop	r26
     6d0:	9f 91       	pop	r25
     6d2:	8f 91       	pop	r24
     6d4:	7f 91       	pop	r23
     6d6:	6f 91       	pop	r22
     6d8:	5f 91       	pop	r21
     6da:	4f 91       	pop	r20
     6dc:	3f 91       	pop	r19
     6de:	2f 91       	pop	r18
     6e0:	0f 90       	pop	r0
     6e2:	0f be       	out	0x3f, r0	; 63
     6e4:	0f 90       	pop	r0
     6e6:	1f 90       	pop	r1
     6e8:	18 95       	reti

000006ea <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
     6ea:	1f 92       	push	r1
     6ec:	0f 92       	push	r0
     6ee:	0f b6       	in	r0, 0x3f	; 63
     6f0:	0f 92       	push	r0
     6f2:	11 24       	eor	r1, r1
     6f4:	2f 93       	push	r18
     6f6:	3f 93       	push	r19
     6f8:	4f 93       	push	r20
     6fa:	5f 93       	push	r21
     6fc:	6f 93       	push	r22
     6fe:	7f 93       	push	r23
     700:	8f 93       	push	r24
     702:	9f 93       	push	r25
     704:	af 93       	push	r26
     706:	bf 93       	push	r27
     708:	ef 93       	push	r30
     70a:	ff 93       	push	r31
TIMER1COMPA();
     70c:	e0 91 ad 00 	lds	r30, 0x00AD
     710:	f0 91 ae 00 	lds	r31, 0x00AE
     714:	09 95       	icall
}
     716:	ff 91       	pop	r31
     718:	ef 91       	pop	r30
     71a:	bf 91       	pop	r27
     71c:	af 91       	pop	r26
     71e:	9f 91       	pop	r25
     720:	8f 91       	pop	r24
     722:	7f 91       	pop	r23
     724:	6f 91       	pop	r22
     726:	5f 91       	pop	r21
     728:	4f 91       	pop	r20
     72a:	3f 91       	pop	r19
     72c:	2f 91       	pop	r18
     72e:	0f 90       	pop	r0
     730:	0f be       	out	0x3f, r0	; 63
     732:	0f 90       	pop	r0
     734:	1f 90       	pop	r1
     736:	18 95       	reti

00000738 <__vector_8>:

void __vector_8(void) __attribute__((signal));
void __vector_8(void)
{
     738:	1f 92       	push	r1
     73a:	0f 92       	push	r0
     73c:	0f b6       	in	r0, 0x3f	; 63
     73e:	0f 92       	push	r0
     740:	11 24       	eor	r1, r1
     742:	2f 93       	push	r18
     744:	3f 93       	push	r19
     746:	4f 93       	push	r20
     748:	5f 93       	push	r21
     74a:	6f 93       	push	r22
     74c:	7f 93       	push	r23
     74e:	8f 93       	push	r24
     750:	9f 93       	push	r25
     752:	af 93       	push	r26
     754:	bf 93       	push	r27
     756:	ef 93       	push	r30
     758:	ff 93       	push	r31
  TIMER1COMPB();
     75a:	e0 91 ab 00 	lds	r30, 0x00AB
     75e:	f0 91 ac 00 	lds	r31, 0x00AC
     762:	09 95       	icall
}
     764:	ff 91       	pop	r31
     766:	ef 91       	pop	r30
     768:	bf 91       	pop	r27
     76a:	af 91       	pop	r26
     76c:	9f 91       	pop	r25
     76e:	8f 91       	pop	r24
     770:	7f 91       	pop	r23
     772:	6f 91       	pop	r22
     774:	5f 91       	pop	r21
     776:	4f 91       	pop	r20
     778:	3f 91       	pop	r19
     77a:	2f 91       	pop	r18
     77c:	0f 90       	pop	r0
     77e:	0f be       	out	0x3f, r0	; 63
     780:	0f 90       	pop	r0
     782:	1f 90       	pop	r1
     784:	18 95       	reti

00000786 <__vector_9>:

void __vector_9(void) __attribute__((signal));
void __vector_9(void)
{
     786:	1f 92       	push	r1
     788:	0f 92       	push	r0
     78a:	0f b6       	in	r0, 0x3f	; 63
     78c:	0f 92       	push	r0
     78e:	11 24       	eor	r1, r1
     790:	2f 93       	push	r18
     792:	3f 93       	push	r19
     794:	4f 93       	push	r20
     796:	5f 93       	push	r21
     798:	6f 93       	push	r22
     79a:	7f 93       	push	r23
     79c:	8f 93       	push	r24
     79e:	9f 93       	push	r25
     7a0:	af 93       	push	r26
     7a2:	bf 93       	push	r27
     7a4:	ef 93       	push	r30
     7a6:	ff 93       	push	r31
  TIMER1OVF();
     7a8:	e0 91 c3 00 	lds	r30, 0x00C3
     7ac:	f0 91 c4 00 	lds	r31, 0x00C4
     7b0:	09 95       	icall
}
     7b2:	ff 91       	pop	r31
     7b4:	ef 91       	pop	r30
     7b6:	bf 91       	pop	r27
     7b8:	af 91       	pop	r26
     7ba:	9f 91       	pop	r25
     7bc:	8f 91       	pop	r24
     7be:	7f 91       	pop	r23
     7c0:	6f 91       	pop	r22
     7c2:	5f 91       	pop	r21
     7c4:	4f 91       	pop	r20
     7c6:	3f 91       	pop	r19
     7c8:	2f 91       	pop	r18
     7ca:	0f 90       	pop	r0
     7cc:	0f be       	out	0x3f, r0	; 63
     7ce:	0f 90       	pop	r0
     7d0:	1f 90       	pop	r1
     7d2:	18 95       	reti

000007d4 <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
     7d4:	1f 92       	push	r1
     7d6:	0f 92       	push	r0
     7d8:	0f b6       	in	r0, 0x3f	; 63
     7da:	0f 92       	push	r0
     7dc:	11 24       	eor	r1, r1
     7de:	2f 93       	push	r18
     7e0:	3f 93       	push	r19
     7e2:	4f 93       	push	r20
     7e4:	5f 93       	push	r21
     7e6:	6f 93       	push	r22
     7e8:	7f 93       	push	r23
     7ea:	8f 93       	push	r24
     7ec:	9f 93       	push	r25
     7ee:	af 93       	push	r26
     7f0:	bf 93       	push	r27
     7f2:	ef 93       	push	r30
     7f4:	ff 93       	push	r31

  TIMER0COMP();
     7f6:	e0 91 bb 00 	lds	r30, 0x00BB
     7fa:	f0 91 bc 00 	lds	r31, 0x00BC
     7fe:	09 95       	icall
}
     800:	ff 91       	pop	r31
     802:	ef 91       	pop	r30
     804:	bf 91       	pop	r27
     806:	af 91       	pop	r26
     808:	9f 91       	pop	r25
     80a:	8f 91       	pop	r24
     80c:	7f 91       	pop	r23
     80e:	6f 91       	pop	r22
     810:	5f 91       	pop	r21
     812:	4f 91       	pop	r20
     814:	3f 91       	pop	r19
     816:	2f 91       	pop	r18
     818:	0f 90       	pop	r0
     81a:	0f be       	out	0x3f, r0	; 63
     81c:	0f 90       	pop	r0
     81e:	1f 90       	pop	r1
     820:	18 95       	reti

00000822 <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
     822:	1f 92       	push	r1
     824:	0f 92       	push	r0
     826:	0f b6       	in	r0, 0x3f	; 63
     828:	0f 92       	push	r0
     82a:	11 24       	eor	r1, r1
     82c:	2f 93       	push	r18
     82e:	3f 93       	push	r19
     830:	4f 93       	push	r20
     832:	5f 93       	push	r21
     834:	6f 93       	push	r22
     836:	7f 93       	push	r23
     838:	8f 93       	push	r24
     83a:	9f 93       	push	r25
     83c:	af 93       	push	r26
     83e:	bf 93       	push	r27
     840:	ef 93       	push	r30
     842:	ff 93       	push	r31

  TIMER0OVF_INT();
     844:	e0 91 6e 00 	lds	r30, 0x006E
     848:	f0 91 6f 00 	lds	r31, 0x006F
     84c:	09 95       	icall
}
     84e:	ff 91       	pop	r31
     850:	ef 91       	pop	r30
     852:	bf 91       	pop	r27
     854:	af 91       	pop	r26
     856:	9f 91       	pop	r25
     858:	8f 91       	pop	r24
     85a:	7f 91       	pop	r23
     85c:	6f 91       	pop	r22
     85e:	5f 91       	pop	r21
     860:	4f 91       	pop	r20
     862:	3f 91       	pop	r19
     864:	2f 91       	pop	r18
     866:	0f 90       	pop	r0
     868:	0f be       	out	0x3f, r0	; 63
     86a:	0f 90       	pop	r0
     86c:	1f 90       	pop	r1
     86e:	18 95       	reti

00000870 <__vector_12>:

void __vector_12(void) __attribute__((signal));
void __vector_12(void)
{
     870:	1f 92       	push	r1
     872:	0f 92       	push	r0
     874:	0f b6       	in	r0, 0x3f	; 63
     876:	0f 92       	push	r0
     878:	11 24       	eor	r1, r1
     87a:	2f 93       	push	r18
     87c:	3f 93       	push	r19
     87e:	4f 93       	push	r20
     880:	5f 93       	push	r21
     882:	6f 93       	push	r22
     884:	7f 93       	push	r23
     886:	8f 93       	push	r24
     888:	9f 93       	push	r25
     88a:	af 93       	push	r26
     88c:	bf 93       	push	r27
     88e:	ef 93       	push	r30
     890:	ff 93       	push	r31
  SPI_STC();
     892:	e0 91 af 00 	lds	r30, 0x00AF
     896:	f0 91 b0 00 	lds	r31, 0x00B0
     89a:	09 95       	icall
}
     89c:	ff 91       	pop	r31
     89e:	ef 91       	pop	r30
     8a0:	bf 91       	pop	r27
     8a2:	af 91       	pop	r26
     8a4:	9f 91       	pop	r25
     8a6:	8f 91       	pop	r24
     8a8:	7f 91       	pop	r23
     8aa:	6f 91       	pop	r22
     8ac:	5f 91       	pop	r21
     8ae:	4f 91       	pop	r20
     8b0:	3f 91       	pop	r19
     8b2:	2f 91       	pop	r18
     8b4:	0f 90       	pop	r0
     8b6:	0f be       	out	0x3f, r0	; 63
     8b8:	0f 90       	pop	r0
     8ba:	1f 90       	pop	r1
     8bc:	18 95       	reti

000008be <__vector_13>:

void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
     8be:	1f 92       	push	r1
     8c0:	0f 92       	push	r0
     8c2:	0f b6       	in	r0, 0x3f	; 63
     8c4:	0f 92       	push	r0
     8c6:	11 24       	eor	r1, r1
     8c8:	2f 93       	push	r18
     8ca:	3f 93       	push	r19
     8cc:	4f 93       	push	r20
     8ce:	5f 93       	push	r21
     8d0:	6f 93       	push	r22
     8d2:	7f 93       	push	r23
     8d4:	8f 93       	push	r24
     8d6:	9f 93       	push	r25
     8d8:	af 93       	push	r26
     8da:	bf 93       	push	r27
     8dc:	ef 93       	push	r30
     8de:	ff 93       	push	r31
  USART_RXC();
     8e0:	e0 91 a5 00 	lds	r30, 0x00A5
     8e4:	f0 91 a6 00 	lds	r31, 0x00A6
     8e8:	09 95       	icall
}
     8ea:	ff 91       	pop	r31
     8ec:	ef 91       	pop	r30
     8ee:	bf 91       	pop	r27
     8f0:	af 91       	pop	r26
     8f2:	9f 91       	pop	r25
     8f4:	8f 91       	pop	r24
     8f6:	7f 91       	pop	r23
     8f8:	6f 91       	pop	r22
     8fa:	5f 91       	pop	r21
     8fc:	4f 91       	pop	r20
     8fe:	3f 91       	pop	r19
     900:	2f 91       	pop	r18
     902:	0f 90       	pop	r0
     904:	0f be       	out	0x3f, r0	; 63
     906:	0f 90       	pop	r0
     908:	1f 90       	pop	r1
     90a:	18 95       	reti

0000090c <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
     90c:	1f 92       	push	r1
     90e:	0f 92       	push	r0
     910:	0f b6       	in	r0, 0x3f	; 63
     912:	0f 92       	push	r0
     914:	11 24       	eor	r1, r1
     916:	2f 93       	push	r18
     918:	3f 93       	push	r19
     91a:	4f 93       	push	r20
     91c:	5f 93       	push	r21
     91e:	6f 93       	push	r22
     920:	7f 93       	push	r23
     922:	8f 93       	push	r24
     924:	9f 93       	push	r25
     926:	af 93       	push	r26
     928:	bf 93       	push	r27
     92a:	ef 93       	push	r30
     92c:	ff 93       	push	r31
  USART_UDRE();
     92e:	e0 91 bd 00 	lds	r30, 0x00BD
     932:	f0 91 be 00 	lds	r31, 0x00BE
     936:	09 95       	icall
}
     938:	ff 91       	pop	r31
     93a:	ef 91       	pop	r30
     93c:	bf 91       	pop	r27
     93e:	af 91       	pop	r26
     940:	9f 91       	pop	r25
     942:	8f 91       	pop	r24
     944:	7f 91       	pop	r23
     946:	6f 91       	pop	r22
     948:	5f 91       	pop	r21
     94a:	4f 91       	pop	r20
     94c:	3f 91       	pop	r19
     94e:	2f 91       	pop	r18
     950:	0f 90       	pop	r0
     952:	0f be       	out	0x3f, r0	; 63
     954:	0f 90       	pop	r0
     956:	1f 90       	pop	r1
     958:	18 95       	reti

0000095a <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
     95a:	1f 92       	push	r1
     95c:	0f 92       	push	r0
     95e:	0f b6       	in	r0, 0x3f	; 63
     960:	0f 92       	push	r0
     962:	11 24       	eor	r1, r1
     964:	2f 93       	push	r18
     966:	3f 93       	push	r19
     968:	4f 93       	push	r20
     96a:	5f 93       	push	r21
     96c:	6f 93       	push	r22
     96e:	7f 93       	push	r23
     970:	8f 93       	push	r24
     972:	9f 93       	push	r25
     974:	af 93       	push	r26
     976:	bf 93       	push	r27
     978:	ef 93       	push	r30
     97a:	ff 93       	push	r31
  USART_TXC();
     97c:	e0 91 b9 00 	lds	r30, 0x00B9
     980:	f0 91 ba 00 	lds	r31, 0x00BA
     984:	09 95       	icall
}
     986:	ff 91       	pop	r31
     988:	ef 91       	pop	r30
     98a:	bf 91       	pop	r27
     98c:	af 91       	pop	r26
     98e:	9f 91       	pop	r25
     990:	8f 91       	pop	r24
     992:	7f 91       	pop	r23
     994:	6f 91       	pop	r22
     996:	5f 91       	pop	r21
     998:	4f 91       	pop	r20
     99a:	3f 91       	pop	r19
     99c:	2f 91       	pop	r18
     99e:	0f 90       	pop	r0
     9a0:	0f be       	out	0x3f, r0	; 63
     9a2:	0f 90       	pop	r0
     9a4:	1f 90       	pop	r1
     9a6:	18 95       	reti

000009a8 <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
     9a8:	1f 92       	push	r1
     9aa:	0f 92       	push	r0
     9ac:	0f b6       	in	r0, 0x3f	; 63
     9ae:	0f 92       	push	r0
     9b0:	11 24       	eor	r1, r1
     9b2:	2f 93       	push	r18
     9b4:	3f 93       	push	r19
     9b6:	4f 93       	push	r20
     9b8:	5f 93       	push	r21
     9ba:	6f 93       	push	r22
     9bc:	7f 93       	push	r23
     9be:	8f 93       	push	r24
     9c0:	9f 93       	push	r25
     9c2:	af 93       	push	r26
     9c4:	bf 93       	push	r27
     9c6:	ef 93       	push	r30
     9c8:	ff 93       	push	r31
  ADC_INT();
     9ca:	e0 91 b3 00 	lds	r30, 0x00B3
     9ce:	f0 91 b4 00 	lds	r31, 0x00B4
     9d2:	09 95       	icall
}
     9d4:	ff 91       	pop	r31
     9d6:	ef 91       	pop	r30
     9d8:	bf 91       	pop	r27
     9da:	af 91       	pop	r26
     9dc:	9f 91       	pop	r25
     9de:	8f 91       	pop	r24
     9e0:	7f 91       	pop	r23
     9e2:	6f 91       	pop	r22
     9e4:	5f 91       	pop	r21
     9e6:	4f 91       	pop	r20
     9e8:	3f 91       	pop	r19
     9ea:	2f 91       	pop	r18
     9ec:	0f 90       	pop	r0
     9ee:	0f be       	out	0x3f, r0	; 63
     9f0:	0f 90       	pop	r0
     9f2:	1f 90       	pop	r1
     9f4:	18 95       	reti

000009f6 <__vector_17>:

void __vector_17(void) __attribute__((signal));
void __vector_17(void)
{
     9f6:	1f 92       	push	r1
     9f8:	0f 92       	push	r0
     9fa:	0f b6       	in	r0, 0x3f	; 63
     9fc:	0f 92       	push	r0
     9fe:	11 24       	eor	r1, r1
     a00:	2f 93       	push	r18
     a02:	3f 93       	push	r19
     a04:	4f 93       	push	r20
     a06:	5f 93       	push	r21
     a08:	6f 93       	push	r22
     a0a:	7f 93       	push	r23
     a0c:	8f 93       	push	r24
     a0e:	9f 93       	push	r25
     a10:	af 93       	push	r26
     a12:	bf 93       	push	r27
     a14:	ef 93       	push	r30
     a16:	ff 93       	push	r31
  EE_RDY();
     a18:	e0 91 b5 00 	lds	r30, 0x00B5
     a1c:	f0 91 b6 00 	lds	r31, 0x00B6
     a20:	09 95       	icall
}
     a22:	ff 91       	pop	r31
     a24:	ef 91       	pop	r30
     a26:	bf 91       	pop	r27
     a28:	af 91       	pop	r26
     a2a:	9f 91       	pop	r25
     a2c:	8f 91       	pop	r24
     a2e:	7f 91       	pop	r23
     a30:	6f 91       	pop	r22
     a32:	5f 91       	pop	r21
     a34:	4f 91       	pop	r20
     a36:	3f 91       	pop	r19
     a38:	2f 91       	pop	r18
     a3a:	0f 90       	pop	r0
     a3c:	0f be       	out	0x3f, r0	; 63
     a3e:	0f 90       	pop	r0
     a40:	1f 90       	pop	r1
     a42:	18 95       	reti

00000a44 <__vector_18>:

void __vector_18(void) __attribute__((signal));
void __vector_18(void)
{
     a44:	1f 92       	push	r1
     a46:	0f 92       	push	r0
     a48:	0f b6       	in	r0, 0x3f	; 63
     a4a:	0f 92       	push	r0
     a4c:	11 24       	eor	r1, r1
     a4e:	2f 93       	push	r18
     a50:	3f 93       	push	r19
     a52:	4f 93       	push	r20
     a54:	5f 93       	push	r21
     a56:	6f 93       	push	r22
     a58:	7f 93       	push	r23
     a5a:	8f 93       	push	r24
     a5c:	9f 93       	push	r25
     a5e:	af 93       	push	r26
     a60:	bf 93       	push	r27
     a62:	ef 93       	push	r30
     a64:	ff 93       	push	r31
  ANA_COMP();
     a66:	e0 91 b1 00 	lds	r30, 0x00B1
     a6a:	f0 91 b2 00 	lds	r31, 0x00B2
     a6e:	09 95       	icall
}
     a70:	ff 91       	pop	r31
     a72:	ef 91       	pop	r30
     a74:	bf 91       	pop	r27
     a76:	af 91       	pop	r26
     a78:	9f 91       	pop	r25
     a7a:	8f 91       	pop	r24
     a7c:	7f 91       	pop	r23
     a7e:	6f 91       	pop	r22
     a80:	5f 91       	pop	r21
     a82:	4f 91       	pop	r20
     a84:	3f 91       	pop	r19
     a86:	2f 91       	pop	r18
     a88:	0f 90       	pop	r0
     a8a:	0f be       	out	0x3f, r0	; 63
     a8c:	0f 90       	pop	r0
     a8e:	1f 90       	pop	r1
     a90:	18 95       	reti

00000a92 <__vector_19>:

void __vector_19(void) __attribute__((signal));
void __vector_19(void)
{
     a92:	1f 92       	push	r1
     a94:	0f 92       	push	r0
     a96:	0f b6       	in	r0, 0x3f	; 63
     a98:	0f 92       	push	r0
     a9a:	11 24       	eor	r1, r1
     a9c:	2f 93       	push	r18
     a9e:	3f 93       	push	r19
     aa0:	4f 93       	push	r20
     aa2:	5f 93       	push	r21
     aa4:	6f 93       	push	r22
     aa6:	7f 93       	push	r23
     aa8:	8f 93       	push	r24
     aaa:	9f 93       	push	r25
     aac:	af 93       	push	r26
     aae:	bf 93       	push	r27
     ab0:	ef 93       	push	r30
     ab2:	ff 93       	push	r31
  TWI_I2C();
     ab4:	e0 91 a3 00 	lds	r30, 0x00A3
     ab8:	f0 91 a4 00 	lds	r31, 0x00A4
     abc:	09 95       	icall
}
     abe:	ff 91       	pop	r31
     ac0:	ef 91       	pop	r30
     ac2:	bf 91       	pop	r27
     ac4:	af 91       	pop	r26
     ac6:	9f 91       	pop	r25
     ac8:	8f 91       	pop	r24
     aca:	7f 91       	pop	r23
     acc:	6f 91       	pop	r22
     ace:	5f 91       	pop	r21
     ad0:	4f 91       	pop	r20
     ad2:	3f 91       	pop	r19
     ad4:	2f 91       	pop	r18
     ad6:	0f 90       	pop	r0
     ad8:	0f be       	out	0x3f, r0	; 63
     ada:	0f 90       	pop	r0
     adc:	1f 90       	pop	r1
     ade:	18 95       	reti

00000ae0 <__vector_20>:

void __vector_20(void) __attribute__((signal));
void __vector_20(void)
{
     ae0:	1f 92       	push	r1
     ae2:	0f 92       	push	r0
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	0f 92       	push	r0
     ae8:	11 24       	eor	r1, r1
     aea:	2f 93       	push	r18
     aec:	3f 93       	push	r19
     aee:	4f 93       	push	r20
     af0:	5f 93       	push	r21
     af2:	6f 93       	push	r22
     af4:	7f 93       	push	r23
     af6:	8f 93       	push	r24
     af8:	9f 93       	push	r25
     afa:	af 93       	push	r26
     afc:	bf 93       	push	r27
     afe:	ef 93       	push	r30
     b00:	ff 93       	push	r31
  SPM_RDY();
     b02:	e0 91 a9 00 	lds	r30, 0x00A9
     b06:	f0 91 aa 00 	lds	r31, 0x00AA
     b0a:	09 95       	icall
}
     b0c:	ff 91       	pop	r31
     b0e:	ef 91       	pop	r30
     b10:	bf 91       	pop	r27
     b12:	af 91       	pop	r26
     b14:	9f 91       	pop	r25
     b16:	8f 91       	pop	r24
     b18:	7f 91       	pop	r23
     b1a:	6f 91       	pop	r22
     b1c:	5f 91       	pop	r21
     b1e:	4f 91       	pop	r20
     b20:	3f 91       	pop	r19
     b22:	2f 91       	pop	r18
     b24:	0f 90       	pop	r0
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	0f 90       	pop	r0
     b2a:	1f 90       	pop	r1
     b2c:	18 95       	reti

00000b2e <main>:

#include "car_sm.h"
uint32_t Distance=0;
int main(void)
{
 Car_SM_Init();
     b2e:	0e 94 49 00 	call	0x92	; 0x92 <Car_SM_Init>
    while(1)
    {
        Car_SM_Update();
     b32:	0e 94 4e 00 	call	0x9c	; 0x9c <Car_SM_Update>
     b36:	fd cf       	rjmp	.-6      	; 0xb32 <main+0x4>

00000b38 <Motor_Init>:
#include "motor.h"
static uint8_t gsv_is_Started=0;
static uint8_t gsv_is_intialized=0;
ERROR_STATUS Motor_Init(uint8_t Motor_Number)
{uint8_t Ret=0;
    switch(Motor_Number)
     b38:	82 30       	cpi	r24, 0x02	; 2
     b3a:	79 f0       	breq	.+30     	; 0xb5a <Motor_Init+0x22>
     b3c:	83 30       	cpi	r24, 0x03	; 3
     b3e:	c9 f0       	breq	.+50     	; 0xb72 <Motor_Init+0x3a>
     b40:	81 30       	cpi	r24, 0x01	; 1
     b42:	39 f5       	brne	.+78     	; 0xb92 <Motor_Init+0x5a>
    {
        case MOTOR_1:
        /*Enable PWM Bit...output*/
        /*IN1*/
        /*IN2*/
			gsv_is_intialized=MOTOR_1;
     b44:	80 93 9f 00 	sts	0x009F, r24
			Ret=Pwm_Init(&PWM_Configuration_1A);
     b48:	81 e8       	ldi	r24, 0x81	; 129
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <Pwm_Init>
			Ret=DIO_init(&Motorone);
     b50:	88 e7       	ldi	r24, 0x78	; 120
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	0e 94 6b 00 	call	0xd6	; 0xd6 <DIO_init>

			  break;
     b58:	08 95       	ret

          case MOTOR_2:
				gsv_is_intialized=MOTOR_2;
     b5a:	82 e0       	ldi	r24, 0x02	; 2
     b5c:	80 93 9f 00 	sts	0x009F, r24
				Ret=Pwm_Init(&PWM_Configuration_1B);
     b60:	8f e7       	ldi	r24, 0x7F	; 127
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <Pwm_Init>
				Ret=DIO_init(&Motortwo);
     b68:	85 e7       	ldi	r24, 0x75	; 117
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	0e 94 6b 00 	call	0xd6	; 0xd6 <DIO_init>
				break;
     b70:	08 95       	ret
				/*IN1*/
				/*IN2*/
				/*ENABLE PWM BIT FOR MOTOR 2*/
				/*IN3*/
				/*IN4*/
				gsv_is_intialized=ALL_MOTOR;
     b72:	83 e0       	ldi	r24, 0x03	; 3
     b74:	80 93 9f 00 	sts	0x009F, r24
			Ret=Pwm_Init(&PWM_Configuration_1A);
     b78:	81 e8       	ldi	r24, 0x81	; 129
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <Pwm_Init>
			Ret=Pwm_Init(&PWM_Configuration_1B);
     b80:	8f e7       	ldi	r24, 0x7F	; 127
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <Pwm_Init>
			Ret=DIO_init(&ALL_Motor);
     b88:	82 e7       	ldi	r24, 0x72	; 114
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	0e 94 6b 00 	call	0xd6	; 0xd6 <DIO_init>
				break;
     b90:	08 95       	ret
			   }
      default:
      Ret=E_NOK;
     b92:	81 e0       	ldi	r24, 0x01	; 1
      break;
    }
return Ret;
}
     b94:	08 95       	ret

00000b96 <Motor_Direction>:

ERROR_STATUS Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction)
{uint8_t Ret=0;

  switch(Motor_Number)
     b96:	82 30       	cpi	r24, 0x02	; 2
     b98:	79 f1       	breq	.+94     	; 0xbf8 <Motor_Direction+0x62>
     b9a:	83 30       	cpi	r24, 0x03	; 3
     b9c:	09 f4       	brne	.+2      	; 0xba0 <Motor_Direction+0xa>
     b9e:	55 c0       	rjmp	.+170    	; 0xc4a <Motor_Direction+0xb4>
     ba0:	81 30       	cpi	r24, 0x01	; 1
     ba2:	09 f0       	breq	.+2      	; 0xba6 <Motor_Direction+0x10>
     ba4:	99 c0       	rjmp	.+306    	; 0xcd8 <Motor_Direction+0x142>
  {
  	case MOTOR_1:{
  	switch(Motor_Direction)
     ba6:	61 30       	cpi	r22, 0x01	; 1
     ba8:	31 f0       	breq	.+12     	; 0xbb6 <Motor_Direction+0x20>
     baa:	61 30       	cpi	r22, 0x01	; 1
     bac:	d0 f0       	brcs	.+52     	; 0xbe2 <Motor_Direction+0x4c>
     bae:	62 30       	cpi	r22, 0x02	; 2
     bb0:	09 f0       	breq	.+2      	; 0xbb4 <Motor_Direction+0x1e>
     bb2:	94 c0       	rjmp	.+296    	; 0xcdc <Motor_Direction+0x146>
     bb4:	0b c0       	rjmp	.+22     	; 0xbcc <Motor_Direction+0x36>
  	{
  		case MOTOR_FORWARD:
  		{
  			Ret=DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,HIGH);
     bb6:	83 e0       	ldi	r24, 0x03	; 3
     bb8:	64 e0       	ldi	r22, 0x04	; 4
     bba:	4f ef       	ldi	r20, 0xFF	; 255
     bbc:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_Write>
  			Ret=DIO_Write (MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
     bc0:	83 e0       	ldi	r24, 0x03	; 3
     bc2:	68 e0       	ldi	r22, 0x08	; 8
     bc4:	40 e0       	ldi	r20, 0x00	; 0
     bc6:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_Write>

  			break;
     bca:	08 95       	ret
  		}
  		case MOTOR_BACKWARD:
  		{
  		Ret=DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,HIGH);
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	68 e0       	ldi	r22, 0x08	; 8
     bd0:	4f ef       	ldi	r20, 0xFF	; 255
     bd2:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_Write>
        Ret=DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
     bd6:	83 e0       	ldi	r24, 0x03	; 3
     bd8:	64 e0       	ldi	r22, 0x04	; 4
     bda:	40 e0       	ldi	r20, 0x00	; 0
     bdc:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_Write>

  			break;
     be0:	08 95       	ret
  		}
  		case MOTOR_STOP:{Ret=DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
     be2:	83 e0       	ldi	r24, 0x03	; 3
     be4:	64 e0       	ldi	r22, 0x04	; 4
     be6:	40 e0       	ldi	r20, 0x00	; 0
     be8:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_Write>
  		Ret=DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
     bec:	83 e0       	ldi	r24, 0x03	; 3
     bee:	68 e0       	ldi	r22, 0x08	; 8
     bf0:	40 e0       	ldi	r20, 0x00	; 0
     bf2:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_Write>
  		break;}
     bf6:	08 95       	ret
  	}
  		break;
  	}
  	case MOTOR_2:
  	{
  		switch(Motor_Direction)
     bf8:	61 30       	cpi	r22, 0x01	; 1
     bfa:	31 f0       	breq	.+12     	; 0xc08 <Motor_Direction+0x72>
     bfc:	61 30       	cpi	r22, 0x01	; 1
     bfe:	d0 f0       	brcs	.+52     	; 0xc34 <Motor_Direction+0x9e>
     c00:	62 30       	cpi	r22, 0x02	; 2
     c02:	09 f0       	breq	.+2      	; 0xc06 <Motor_Direction+0x70>
     c04:	6d c0       	rjmp	.+218    	; 0xce0 <Motor_Direction+0x14a>
     c06:	0b c0       	rjmp	.+22     	; 0xc1e <Motor_Direction+0x88>
  		{
  			case MOTOR_FORWARD:
  			{
  				Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,HIGH);
     c08:	83 e0       	ldi	r24, 0x03	; 3
     c0a:	60 e8       	ldi	r22, 0x80	; 128
     c0c:	4f ef       	ldi	r20, 0xFF	; 255
     c0e:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_Write>
          Ret=DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
     c12:	83 e0       	ldi	r24, 0x03	; 3
     c14:	60 e4       	ldi	r22, 0x40	; 64
     c16:	40 e0       	ldi	r20, 0x00	; 0
     c18:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_Write>

  				break;
     c1c:	08 95       	ret
  			}
  			case MOTOR_BACKWARD:
  			{
  				Ret=DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,HIGH);
     c1e:	83 e0       	ldi	r24, 0x03	; 3
     c20:	60 e4       	ldi	r22, 0x40	; 64
     c22:	4f ef       	ldi	r20, 0xFF	; 255
     c24:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_Write>
  			Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
     c28:	83 e0       	ldi	r24, 0x03	; 3
     c2a:	60 e8       	ldi	r22, 0x80	; 128
     c2c:	40 e0       	ldi	r20, 0x00	; 0
     c2e:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_Write>
  				break;
     c32:	08 95       	ret
  			}
  			case MOTOR_STOP:
  			{
  				Ret=DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
     c34:	83 e0       	ldi	r24, 0x03	; 3
     c36:	60 e4       	ldi	r22, 0x40	; 64
     c38:	40 e0       	ldi	r20, 0x00	; 0
     c3a:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_Write>
  				Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
     c3e:	83 e0       	ldi	r24, 0x03	; 3
     c40:	60 e8       	ldi	r22, 0x80	; 128
     c42:	40 e0       	ldi	r20, 0x00	; 0
     c44:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_Write>
  				break;
     c48:	08 95       	ret

  		break;
  	}
  	case ALL_MOTOR:
  	{
  switch(Motor_Direction)
     c4a:	61 30       	cpi	r22, 0x01	; 1
     c4c:	31 f0       	breq	.+12     	; 0xc5a <Motor_Direction+0xc4>
     c4e:	61 30       	cpi	r22, 0x01	; 1
     c50:	70 f1       	brcs	.+92     	; 0xcae <Motor_Direction+0x118>
     c52:	62 30       	cpi	r22, 0x02	; 2
     c54:	09 f0       	breq	.+2      	; 0xc58 <Motor_Direction+0xc2>
     c56:	46 c0       	rjmp	.+140    	; 0xce4 <Motor_Direction+0x14e>
     c58:	15 c0       	rjmp	.+42     	; 0xc84 <Motor_Direction+0xee>
  {
  	case MOTOR_FORWARD:
  	{
  		Ret=DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,HIGH);
     c5a:	83 e0       	ldi	r24, 0x03	; 3
     c5c:	64 e0       	ldi	r22, 0x04	; 4
     c5e:	4f ef       	ldi	r20, 0xFF	; 255
     c60:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_Write>
  		Ret=DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
     c64:	83 e0       	ldi	r24, 0x03	; 3
     c66:	68 e0       	ldi	r22, 0x08	; 8
     c68:	40 e0       	ldi	r20, 0x00	; 0
     c6a:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_Write>

  	Ret=DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
     c6e:	83 e0       	ldi	r24, 0x03	; 3
     c70:	60 e4       	ldi	r22, 0x40	; 64
     c72:	40 e0       	ldi	r20, 0x00	; 0
     c74:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_Write>
  		Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,HIGH);
     c78:	83 e0       	ldi	r24, 0x03	; 3
     c7a:	60 e8       	ldi	r22, 0x80	; 128
     c7c:	4f ef       	ldi	r20, 0xFF	; 255
     c7e:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_Write>

  		break;
     c82:	08 95       	ret
  	}
  	case MOTOR_BACKWARD:
  	{

  		Ret=DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
     c84:	83 e0       	ldi	r24, 0x03	; 3
     c86:	64 e0       	ldi	r22, 0x04	; 4
     c88:	40 e0       	ldi	r20, 0x00	; 0
     c8a:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_Write>
      Ret=DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,HIGH);
     c8e:	83 e0       	ldi	r24, 0x03	; 3
     c90:	68 e0       	ldi	r22, 0x08	; 8
     c92:	4f ef       	ldi	r20, 0xFF	; 255
     c94:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_Write>
  		Ret=DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,HIGH);
     c98:	83 e0       	ldi	r24, 0x03	; 3
     c9a:	60 e4       	ldi	r22, 0x40	; 64
     c9c:	4f ef       	ldi	r20, 0xFF	; 255
     c9e:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_Write>
  		Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
     ca2:	83 e0       	ldi	r24, 0x03	; 3
     ca4:	60 e8       	ldi	r22, 0x80	; 128
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_Write>

  		break;	}
     cac:	08 95       	ret
  	case MOTOR_STOP:
  	{
  			Ret=DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
     cae:	83 e0       	ldi	r24, 0x03	; 3
     cb0:	64 e0       	ldi	r22, 0x04	; 4
     cb2:	40 e0       	ldi	r20, 0x00	; 0
     cb4:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_Write>
  			Ret=DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
     cb8:	83 e0       	ldi	r24, 0x03	; 3
     cba:	60 e4       	ldi	r22, 0x40	; 64
     cbc:	40 e0       	ldi	r20, 0x00	; 0
     cbe:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_Write>

  			Ret=DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
     cc2:	83 e0       	ldi	r24, 0x03	; 3
     cc4:	68 e0       	ldi	r22, 0x08	; 8
     cc6:	40 e0       	ldi	r20, 0x00	; 0
     cc8:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_Write>
  			Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
     ccc:	83 e0       	ldi	r24, 0x03	; 3
     cce:	60 e8       	ldi	r22, 0x80	; 128
     cd0:	40 e0       	ldi	r20, 0x00	; 0
     cd2:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_Write>

  		break;
     cd6:	08 95       	ret
    }
return Ret;
}

ERROR_STATUS Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction)
{uint8_t Ret=0;
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	08 95       	ret
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	08 95       	ret
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	08 95       	ret
  			Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);

  		break;
  	}
    default:
    Ret=E_NOK;
     ce4:	81 e0       	ldi	r24, 0x01	; 1



    }
return Ret;
}
     ce6:	08 95       	ret

00000ce8 <Motor_Start>:


ERROR_STATUS Motor_Start(uint8_t Motor_Number, uint8_t Mot_Speed)
{
  uint8_t Ret=0;
switch (Motor_Number) {
     ce8:	82 30       	cpi	r24, 0x02	; 2
     cea:	69 f0       	breq	.+26     	; 0xd06 <Motor_Start+0x1e>
     cec:	83 30       	cpi	r24, 0x03	; 3
     cee:	a9 f0       	breq	.+42     	; 0xd1a <Motor_Start+0x32>
     cf0:	81 30       	cpi	r24, 0x01	; 1
     cf2:	f1 f4       	brne	.+60     	; 0xd30 <Motor_Start+0x48>
  case MOTOR_1:
  {gsv_is_Started=MOTOR_1;
     cf4:	80 93 a0 00 	sts	0x00A0, r24
    Ret=Pwm_Start(PWM_CH1A,Mot_Speed,30);
     cf8:	2e e1       	ldi	r18, 0x1E	; 30
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	40 e0       	ldi	r20, 0x00	; 0
     cfe:	50 e0       	ldi	r21, 0x00	; 0
     d00:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Pwm_Start>
    break;
     d04:	08 95       	ret
  }
  case MOTOR_2:
  {
    gsv_is_Started=MOTOR_2;
     d06:	82 e0       	ldi	r24, 0x02	; 2
     d08:	80 93 a0 00 	sts	0x00A0, r24
    Ret=Pwm_Start(PWM_CH1B,Mot_Speed,30);
     d0c:	2e e1       	ldi	r18, 0x1E	; 30
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	40 e0       	ldi	r20, 0x00	; 0
     d12:	50 e0       	ldi	r21, 0x00	; 0
     d14:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Pwm_Start>
    break;
     d18:	08 95       	ret
  }
  case ( MOTOR_1 | MOTOR_2 ) :
  {
    gsv_is_Started=MOTOR_1 | MOTOR_2;
     d1a:	83 e0       	ldi	r24, 0x03	; 3
     d1c:	80 93 a0 00 	sts	0x00A0, r24
    Ret=Pwm_Start(PWM_CH1B,Mot_Speed,30);
     d20:	82 e0       	ldi	r24, 0x02	; 2
     d22:	2e e1       	ldi	r18, 0x1E	; 30
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	40 e0       	ldi	r20, 0x00	; 0
     d28:	50 e0       	ldi	r21, 0x00	; 0
     d2a:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Pwm_Start>
    break;
     d2e:	08 95       	ret
  }
  default:
  Ret=E_NOK;
     d30:	81 e0       	ldi	r24, 0x01	; 1
  break;
}


return Ret;
}
     d32:	08 95       	ret

00000d34 <Motor_SpeedUpdate>:
ERROR_STATUS Motor_SpeedUpdate(uint8_t Motor_Number, uint8_t Speed)
{
  uint8_t Ret=0;

switch (Motor_Number) {
     d34:	82 30       	cpi	r24, 0x02	; 2
     d36:	79 f0       	breq	.+30     	; 0xd56 <Motor_SpeedUpdate+0x22>
     d38:	83 30       	cpi	r24, 0x03	; 3
     d3a:	c1 f0       	breq	.+48     	; 0xd6c <Motor_SpeedUpdate+0x38>
     d3c:	81 30       	cpi	r24, 0x01	; 1
     d3e:	11 f5       	brne	.+68     	; 0xd84 <Motor_SpeedUpdate+0x50>
  case MOTOR_1:
  { if(gsv_is_intialized == Motor_Number)
     d40:	80 91 9f 00 	lds	r24, 0x009F
     d44:	81 30       	cpi	r24, 0x01	; 1
     d46:	01 f5       	brne	.+64     	; 0xd88 <Motor_SpeedUpdate+0x54>
    Ret=Pwm_Start(PWM_CH1A,Speed,30);
     d48:	2e e1       	ldi	r18, 0x1E	; 30
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	40 e0       	ldi	r20, 0x00	; 0
     d4e:	50 e0       	ldi	r21, 0x00	; 0
     d50:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Pwm_Start>
     d54:	08 95       	ret
    else{Ret=E_NOK;}
    break;
  }
  case MOTOR_2:
  {
    if(gsv_is_intialized == Motor_Number)
     d56:	80 91 9f 00 	lds	r24, 0x009F
     d5a:	82 30       	cpi	r24, 0x02	; 2
     d5c:	b9 f4       	brne	.+46     	; 0xd8c <Motor_SpeedUpdate+0x58>
      Ret=Pwm_Start(PWM_CH1B,Speed,30);
     d5e:	2e e1       	ldi	r18, 0x1E	; 30
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	40 e0       	ldi	r20, 0x00	; 0
     d64:	50 e0       	ldi	r21, 0x00	; 0
     d66:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Pwm_Start>
     d6a:	08 95       	ret
      else{Ret=E_NOK;}
    break;
  }
  case ( MOTOR_1 | MOTOR_2 ) :
  {
    if(gsv_is_intialized == Motor_Number)
     d6c:	80 91 9f 00 	lds	r24, 0x009F
     d70:	83 30       	cpi	r24, 0x03	; 3
     d72:	71 f4       	brne	.+28     	; 0xd90 <Motor_SpeedUpdate+0x5c>
        Ret=Pwm_Start(PWM_CH1B,Speed,30);
     d74:	82 e0       	ldi	r24, 0x02	; 2
     d76:	2e e1       	ldi	r18, 0x1E	; 30
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	40 e0       	ldi	r20, 0x00	; 0
     d7c:	50 e0       	ldi	r21, 0x00	; 0
     d7e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Pwm_Start>
     d82:	08 95       	ret
        else{Ret=E_NOK;}
    break;
  }
  default:
  Ret=E_NOK;
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	08 95       	ret

switch (Motor_Number) {
  case MOTOR_1:
  { if(gsv_is_intialized == Motor_Number)
    Ret=Pwm_Start(PWM_CH1A,Speed,30);
    else{Ret=E_NOK;}
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	08 95       	ret
  }
  case MOTOR_2:
  {
    if(gsv_is_intialized == Motor_Number)
      Ret=Pwm_Start(PWM_CH1B,Speed,30);
      else{Ret=E_NOK;}
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	08 95       	ret
  }
  case ( MOTOR_1 | MOTOR_2 ) :
  {
    if(gsv_is_intialized == Motor_Number)
        Ret=Pwm_Start(PWM_CH1B,Speed,30);
        else{Ret=E_NOK;}
     d90:	81 e0       	ldi	r24, 0x01	; 1
  Ret=E_NOK;
  break;
}

return Ret;
}
     d92:	08 95       	ret

00000d94 <Motor_Stop>:

ERROR_STATUS Motor_Stop(uint8_t Motor_Number)
{
	uint8_t Ret=0;
	switch(Motor_Number)
     d94:	81 30       	cpi	r24, 0x01	; 1
     d96:	19 f0       	breq	.+6      	; 0xd9e <Motor_Stop+0xa>
     d98:	82 30       	cpi	r24, 0x02	; 2
     d9a:	49 f4       	brne	.+18     	; 0xdae <Motor_Stop+0x1a>
     d9c:	04 c0       	rjmp	.+8      	; 0xda6 <Motor_Stop+0x12>
	{
		case MOTOR_1 :
		Ret=Pwm_Stop(PWM_CH1A);
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	0e 94 df 08 	call	0x11be	; 0x11be <Pwm_Stop>
		break;
     da4:	08 95       	ret
		case MOTOR_2:
		Ret=Pwm_Stop(PWM_CH1B);
     da6:	82 e0       	ldi	r24, 0x02	; 2
     da8:	0e 94 df 08 	call	0x11be	; 0x11be <Pwm_Stop>
		break;
     dac:	08 95       	ret
		default:
		Ret=E_NOK;
     dae:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}


	return Ret;
}
     db0:	08 95       	ret

00000db2 <Motor_GetStatus>:

 ERROR_STATUS Motor_GetStatus(uint8_t Motor_Number, uint8_t* Mot_status)
 {
	 if(gsv_is_intialized == Motor_Number)
     db2:	90 91 9f 00 	lds	r25, 0x009F
     db6:	98 17       	cp	r25, r24
     db8:	21 f4       	brne	.+8      	; 0xdc2 <Motor_GetStatus+0x10>
		*Mot_status=1;
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	fb 01       	movw	r30, r22
     dbe:	80 83       	st	Z, r24
     dc0:	08 95       	ret
	 else
	 {
		*Mot_status=0;
     dc2:	fb 01       	movw	r30, r22
     dc4:	10 82       	st	Z, r1
	 }
	 
 }
     dc6:	08 95       	ret

00000dc8 <Pwm_Init>:
/*                                                                               */
/* Description: initialize the PWM configuration                                 */
/*********************************************************************************/

ERROR_STATUS Pwm_Init(Pwm_Cfg_s *Pwm_Cfg)
{uint8_t Ret=0;
     dc8:	fc 01       	movw	r30, r24
	switch(Pwm_Cfg->Channel)
     dca:	80 81       	ld	r24, Z
     dcc:	81 30       	cpi	r24, 0x01	; 1
     dce:	61 f0       	breq	.+24     	; 0xde8 <Pwm_Init+0x20>
     dd0:	81 30       	cpi	r24, 0x01	; 1
     dd2:	28 f0       	brcs	.+10     	; 0xdde <Pwm_Init+0x16>
     dd4:	82 30       	cpi	r24, 0x02	; 2
     dd6:	81 f0       	breq	.+32     	; 0xdf8 <Pwm_Init+0x30>
     dd8:	83 30       	cpi	r24, 0x03	; 3
     dda:	d9 f4       	brne	.+54     	; 0xe12 <Pwm_Init+0x4a>
     ddc:	15 c0       	rjmp	.+42     	; 0xe08 <Pwm_Init+0x40>
		{
			case PWM_CH0:
			TCCR0|=T0_PWM_FAST |T0_NON_INVERTING;
     dde:	83 b7       	in	r24, 0x33	; 51
     de0:	88 66       	ori	r24, 0x68	; 104
     de2:	83 bf       	out	0x33, r24	; 51
			Ret=E_OK;
     de4:	80 e0       	ldi	r24, 0x00	; 0
			break;
     de6:	16 c0       	rjmp	.+44     	; 0xe14 <Pwm_Init+0x4c>

			case PWM_CH1A:
			TCCR1 |= T1_PWM_Phase_8 | T1_OC1A_OC1B|0x0020;
     de8:	8e b5       	in	r24, 0x2e	; 46
     dea:	9f b5       	in	r25, 0x2f	; 47
     dec:	80 62       	ori	r24, 0x20	; 32
     dee:	91 6a       	ori	r25, 0xA1	; 161
     df0:	9f bd       	out	0x2f, r25	; 47
     df2:	8e bd       	out	0x2e, r24	; 46
			Ret=E_OK;
     df4:	80 e0       	ldi	r24, 0x00	; 0
			break;
     df6:	0e c0       	rjmp	.+28     	; 0xe14 <Pwm_Init+0x4c>

			case PWM_CH1B:
			TCCR1 |= T1_PWM_Phase_8 | T1_OC1A_OC1B;
     df8:	8e b5       	in	r24, 0x2e	; 46
     dfa:	9f b5       	in	r25, 0x2f	; 47
     dfc:	80 62       	ori	r24, 0x20	; 32
     dfe:	91 6a       	ori	r25, 0xA1	; 161
     e00:	9f bd       	out	0x2f, r25	; 47
     e02:	8e bd       	out	0x2e, r24	; 46
			Ret=E_OK;
     e04:	80 e0       	ldi	r24, 0x00	; 0
			break;
     e06:	06 c0       	rjmp	.+12     	; 0xe14 <Pwm_Init+0x4c>


			case PWM_CH2:
			TCCR2 |=T2_PWM_FAST |T2_NON_INVERTING;
     e08:	85 b5       	in	r24, 0x25	; 37
     e0a:	88 66       	ori	r24, 0x68	; 104
     e0c:	85 bd       	out	0x25, r24	; 37
			Ret=E_OK;
     e0e:	80 e0       	ldi	r24, 0x00	; 0
			break;
     e10:	01 c0       	rjmp	.+2      	; 0xe14 <Pwm_Init+0x4c>
			default:
			Ret=E_NOK;
     e12:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
	sgl_Prescaler=Pwm_Cfg->Prescaler;
     e14:	91 81       	ldd	r25, Z+1	; 0x01
     e16:	90 93 a1 00 	sts	0x00A1, r25
	u32g_T1_Prescaler=en_prescal;
	OCR1A =u16_outputCompareA;
	OCR1B =u16_outputCompareB;
	TCNT1=u16_initialValue;
	*/
}
     e1a:	08 95       	ret

00000e1c <Pwm_Start>:
/*-------------------------------------------------------                        */
/*((all this calculations are for phase correct mode))                           */
/*all this calculation for F_CPU 16MHz                                           */
/*********************************************************************************/
ERROR_STATUS Pwm_Start(uint8_t Channel,uint8_t Duty,uint32_t Frequncy)
{uint8_t Ret=0;
     e1c:	cf 92       	push	r12
     e1e:	df 92       	push	r13
     e20:	ef 92       	push	r14
     e22:	ff 92       	push	r15
     e24:	0f 93       	push	r16
     e26:	1f 93       	push	r17
     e28:	89 01       	movw	r16, r18
     e2a:	9a 01       	movw	r18, r20
	float dutyReal;
uint32_t pwm_time_on = MAX_HOLD;

if(Frequncy <= 31372 && Frequncy > 3921 )
     e2c:	0f 2e       	mov	r0, r31
     e2e:	fe ea       	ldi	r31, 0xAE	; 174
     e30:	cf 2e       	mov	r12, r31
     e32:	f0 ef       	ldi	r31, 0xF0	; 240
     e34:	df 2e       	mov	r13, r31
     e36:	ff ef       	ldi	r31, 0xFF	; 255
     e38:	ef 2e       	mov	r14, r31
     e3a:	ff ef       	ldi	r31, 0xFF	; 255
     e3c:	ff 2e       	mov	r15, r31
     e3e:	f0 2d       	mov	r31, r0
     e40:	c0 0e       	add	r12, r16
     e42:	d1 1e       	adc	r13, r17
     e44:	e2 1e       	adc	r14, r18
     e46:	f3 1e       	adc	r15, r19
     e48:	9b e3       	ldi	r25, 0x3B	; 59
     e4a:	c9 16       	cp	r12, r25
     e4c:	9b e6       	ldi	r25, 0x6B	; 107
     e4e:	d9 06       	cpc	r13, r25
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	e9 06       	cpc	r14, r25
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	f9 06       	cpc	r15, r25
     e58:	18 f4       	brcc	.+6      	; 0xe60 <Pwm_Start+0x44>
	sgl_Prescaler=PWM_PRESCALER_NO;
     e5a:	10 92 a1 00 	sts	0x00A1, r1
     e5e:	a2 c0       	rjmp	.+324    	; 0xfa4 <Pwm_Start+0x188>
else if(Frequncy <= 3921 && Frequncy > 980)
     e60:	0f 2e       	mov	r0, r31
     e62:	fb e2       	ldi	r31, 0x2B	; 43
     e64:	cf 2e       	mov	r12, r31
     e66:	fc ef       	ldi	r31, 0xFC	; 252
     e68:	df 2e       	mov	r13, r31
     e6a:	ff ef       	ldi	r31, 0xFF	; 255
     e6c:	ef 2e       	mov	r14, r31
     e6e:	ff ef       	ldi	r31, 0xFF	; 255
     e70:	ff 2e       	mov	r15, r31
     e72:	f0 2d       	mov	r31, r0
     e74:	c0 0e       	add	r12, r16
     e76:	d1 1e       	adc	r13, r17
     e78:	e2 1e       	adc	r14, r18
     e7a:	f3 1e       	adc	r15, r19
     e7c:	9d e7       	ldi	r25, 0x7D	; 125
     e7e:	c9 16       	cp	r12, r25
     e80:	9b e0       	ldi	r25, 0x0B	; 11
     e82:	d9 06       	cpc	r13, r25
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	e9 06       	cpc	r14, r25
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	f9 06       	cpc	r15, r25
     e8c:	20 f4       	brcc	.+8      	; 0xe96 <Pwm_Start+0x7a>
	sgl_Prescaler=PWM_PRESCALER_8;
     e8e:	91 e0       	ldi	r25, 0x01	; 1
     e90:	90 93 a1 00 	sts	0x00A1, r25
     e94:	a5 c0       	rjmp	.+330    	; 0xfe0 <Pwm_Start+0x1c4>
else if(Frequncy <= 980 && Frequncy > 490)
     e96:	0f 2e       	mov	r0, r31
     e98:	f5 e1       	ldi	r31, 0x15	; 21
     e9a:	cf 2e       	mov	r12, r31
     e9c:	fe ef       	ldi	r31, 0xFE	; 254
     e9e:	df 2e       	mov	r13, r31
     ea0:	ff ef       	ldi	r31, 0xFF	; 255
     ea2:	ef 2e       	mov	r14, r31
     ea4:	ff ef       	ldi	r31, 0xFF	; 255
     ea6:	ff 2e       	mov	r15, r31
     ea8:	f0 2d       	mov	r31, r0
     eaa:	c0 0e       	add	r12, r16
     eac:	d1 1e       	adc	r13, r17
     eae:	e2 1e       	adc	r14, r18
     eb0:	f3 1e       	adc	r15, r19
     eb2:	9a ee       	ldi	r25, 0xEA	; 234
     eb4:	c9 16       	cp	r12, r25
     eb6:	91 e0       	ldi	r25, 0x01	; 1
     eb8:	d9 06       	cpc	r13, r25
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	e9 06       	cpc	r14, r25
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	f9 06       	cpc	r15, r25
     ec2:	20 f4       	brcc	.+8      	; 0xecc <Pwm_Start+0xb0>
	sgl_Prescaler=PWM_PRESCALER_32;
     ec4:	92 e0       	ldi	r25, 0x02	; 2
     ec6:	90 93 a1 00 	sts	0x00A1, r25
     eca:	a1 c0       	rjmp	.+322    	; 0x100e <Pwm_Start+0x1f2>
else if(Frequncy <= 490 && Frequncy > 245)
     ecc:	0f 2e       	mov	r0, r31
     ece:	fa e0       	ldi	r31, 0x0A	; 10
     ed0:	cf 2e       	mov	r12, r31
     ed2:	ff ef       	ldi	r31, 0xFF	; 255
     ed4:	df 2e       	mov	r13, r31
     ed6:	ff ef       	ldi	r31, 0xFF	; 255
     ed8:	ef 2e       	mov	r14, r31
     eda:	ff ef       	ldi	r31, 0xFF	; 255
     edc:	ff 2e       	mov	r15, r31
     ede:	f0 2d       	mov	r31, r0
     ee0:	c0 0e       	add	r12, r16
     ee2:	d1 1e       	adc	r13, r17
     ee4:	e2 1e       	adc	r14, r18
     ee6:	f3 1e       	adc	r15, r19
     ee8:	95 ef       	ldi	r25, 0xF5	; 245
     eea:	c9 16       	cp	r12, r25
     eec:	d1 04       	cpc	r13, r1
     eee:	e1 04       	cpc	r14, r1
     ef0:	f1 04       	cpc	r15, r1
     ef2:	20 f4       	brcc	.+8      	; 0xefc <Pwm_Start+0xe0>
	sgl_Prescaler=PWM_PRESCALER_64;
     ef4:	93 e0       	ldi	r25, 0x03	; 3
     ef6:	90 93 a1 00 	sts	0x00A1, r25
     efa:	90 c0       	rjmp	.+288    	; 0x101c <Pwm_Start+0x200>
else if(Frequncy <= 245 && Frequncy > 122)
     efc:	0f 2e       	mov	r0, r31
     efe:	f5 e8       	ldi	r31, 0x85	; 133
     f00:	cf 2e       	mov	r12, r31
     f02:	ff ef       	ldi	r31, 0xFF	; 255
     f04:	df 2e       	mov	r13, r31
     f06:	ff ef       	ldi	r31, 0xFF	; 255
     f08:	ef 2e       	mov	r14, r31
     f0a:	ff ef       	ldi	r31, 0xFF	; 255
     f0c:	ff 2e       	mov	r15, r31
     f0e:	f0 2d       	mov	r31, r0
     f10:	c0 0e       	add	r12, r16
     f12:	d1 1e       	adc	r13, r17
     f14:	e2 1e       	adc	r14, r18
     f16:	f3 1e       	adc	r15, r19
     f18:	9b e7       	ldi	r25, 0x7B	; 123
     f1a:	c9 16       	cp	r12, r25
     f1c:	d1 04       	cpc	r13, r1
     f1e:	e1 04       	cpc	r14, r1
     f20:	f1 04       	cpc	r15, r1
     f22:	20 f4       	brcc	.+8      	; 0xf2c <Pwm_Start+0x110>
	sgl_Prescaler=PWM_PRESCALER_128;
     f24:	94 e0       	ldi	r25, 0x04	; 4
     f26:	90 93 a1 00 	sts	0x00A1, r25
     f2a:	a5 c0       	rjmp	.+330    	; 0x1076 <Pwm_Start+0x25a>
else if(Frequncy <= 122 && Frequncy > 31)
     f2c:	0f 2e       	mov	r0, r31
     f2e:	f0 ee       	ldi	r31, 0xE0	; 224
     f30:	cf 2e       	mov	r12, r31
     f32:	ff ef       	ldi	r31, 0xFF	; 255
     f34:	df 2e       	mov	r13, r31
     f36:	ff ef       	ldi	r31, 0xFF	; 255
     f38:	ef 2e       	mov	r14, r31
     f3a:	ff ef       	ldi	r31, 0xFF	; 255
     f3c:	ff 2e       	mov	r15, r31
     f3e:	f0 2d       	mov	r31, r0
     f40:	c0 0e       	add	r12, r16
     f42:	d1 1e       	adc	r13, r17
     f44:	e2 1e       	adc	r14, r18
     f46:	f3 1e       	adc	r15, r19
     f48:	9b e5       	ldi	r25, 0x5B	; 91
     f4a:	c9 16       	cp	r12, r25
     f4c:	d1 04       	cpc	r13, r1
     f4e:	e1 04       	cpc	r14, r1
     f50:	f1 04       	cpc	r15, r1
     f52:	20 f4       	brcc	.+8      	; 0xf5c <Pwm_Start+0x140>
	sgl_Prescaler=PWM_PRESCALER_256;
     f54:	95 e0       	ldi	r25, 0x05	; 5
     f56:	90 93 a1 00 	sts	0x00A1, r25
     f5a:	77 c0       	rjmp	.+238    	; 0x104a <Pwm_Start+0x22e>
else if(Frequncy <= 31 && Frequncy > 0)
     f5c:	01 50       	subi	r16, 0x01	; 1
     f5e:	10 40       	sbci	r17, 0x00	; 0
     f60:	20 40       	sbci	r18, 0x00	; 0
     f62:	30 40       	sbci	r19, 0x00	; 0
     f64:	0f 31       	cpi	r16, 0x1F	; 31
     f66:	11 05       	cpc	r17, r1
     f68:	21 05       	cpc	r18, r1
     f6a:	31 05       	cpc	r19, r1
     f6c:	20 f4       	brcc	.+8      	; 0xf76 <Pwm_Start+0x15a>
	sgl_Prescaler=PWM_PRESCALER_1024;
     f6e:	96 e0       	ldi	r25, 0x06	; 6
     f70:	90 93 a1 00 	sts	0x00A1, r25
     f74:	86 c0       	rjmp	.+268    	; 0x1082 <Pwm_Start+0x266>
else{Ret=E_NOK;}
switch(sgl_Prescaler)
     f76:	90 91 a1 00 	lds	r25, 0x00A1
     f7a:	93 30       	cpi	r25, 0x03	; 3
     f7c:	09 f4       	brne	.+2      	; 0xf80 <Pwm_Start+0x164>
     f7e:	4e c0       	rjmp	.+156    	; 0x101c <Pwm_Start+0x200>
     f80:	94 30       	cpi	r25, 0x04	; 4
     f82:	30 f4       	brcc	.+12     	; 0xf90 <Pwm_Start+0x174>
     f84:	91 30       	cpi	r25, 0x01	; 1
     f86:	61 f1       	breq	.+88     	; 0xfe0 <Pwm_Start+0x1c4>
     f88:	92 30       	cpi	r25, 0x02	; 2
     f8a:	08 f0       	brcs	.+2      	; 0xf8e <Pwm_Start+0x172>
     f8c:	40 c0       	rjmp	.+128    	; 0x100e <Pwm_Start+0x1f2>
     f8e:	0a c0       	rjmp	.+20     	; 0xfa4 <Pwm_Start+0x188>
     f90:	95 30       	cpi	r25, 0x05	; 5
     f92:	09 f4       	brne	.+2      	; 0xf96 <Pwm_Start+0x17a>
     f94:	5a c0       	rjmp	.+180    	; 0x104a <Pwm_Start+0x22e>
     f96:	95 30       	cpi	r25, 0x05	; 5
     f98:	08 f4       	brcc	.+2      	; 0xf9c <Pwm_Start+0x180>
     f9a:	6d c0       	rjmp	.+218    	; 0x1076 <Pwm_Start+0x25a>
     f9c:	96 30       	cpi	r25, 0x06	; 6
     f9e:	09 f0       	breq	.+2      	; 0xfa2 <Pwm_Start+0x186>
     fa0:	8d c0       	rjmp	.+282    	; 0x10bc <Pwm_Start+0x2a0>
     fa2:	6f c0       	rjmp	.+222    	; 0x1082 <Pwm_Start+0x266>
{
	case PWM_PRESCALER_NO:
	{
		switch(Channel)
     fa4:	81 30       	cpi	r24, 0x01	; 1
     fa6:	61 f0       	breq	.+24     	; 0xfc0 <Pwm_Start+0x1a4>
     fa8:	81 30       	cpi	r24, 0x01	; 1
     faa:	30 f0       	brcs	.+12     	; 0xfb8 <Pwm_Start+0x19c>
     fac:	82 30       	cpi	r24, 0x02	; 2
     fae:	71 f0       	breq	.+28     	; 0xfcc <Pwm_Start+0x1b0>
     fb0:	83 30       	cpi	r24, 0x03	; 3
     fb2:	09 f0       	breq	.+2      	; 0xfb6 <Pwm_Start+0x19a>
     fb4:	83 c0       	rjmp	.+262    	; 0x10bc <Pwm_Start+0x2a0>
     fb6:	10 c0       	rjmp	.+32     	; 0xfd8 <Pwm_Start+0x1bc>
		{
			case PWM_CH0:
			{
				TCCR0|=PWM_PRESCALER_NO_CONFIG;
     fb8:	83 b7       	in	r24, 0x33	; 51
     fba:	81 60       	ori	r24, 0x01	; 1
     fbc:	83 bf       	out	0x33, r24	; 51
				Ret=E_OK;
				break;
     fbe:	88 c0       	rjmp	.+272    	; 0x10d0 <Pwm_Start+0x2b4>
			}
			case PWM_CH1A:
			{
			TCCR1|=PWM_PRESCALER_NO_CONFIG;
     fc0:	8e b5       	in	r24, 0x2e	; 46
     fc2:	9f b5       	in	r25, 0x2f	; 47
     fc4:	81 60       	ori	r24, 0x01	; 1
     fc6:	9f bd       	out	0x2f, r25	; 47
     fc8:	8e bd       	out	0x2e, r24	; 46
			Ret=E_OK;
			break;
     fca:	98 c0       	rjmp	.+304    	; 0x10fc <Pwm_Start+0x2e0>
			}			
			case PWM_CH1B:
			{	TCCR1|=PWM_PRESCALER_NO_CONFIG;
     fcc:	8e b5       	in	r24, 0x2e	; 46
     fce:	9f b5       	in	r25, 0x2f	; 47
     fd0:	81 60       	ori	r24, 0x01	; 1
     fd2:	9f bd       	out	0x2f, r25	; 47
     fd4:	8e bd       	out	0x2e, r24	; 46
				Ret=E_OK;
				break;
     fd6:	ad c0       	rjmp	.+346    	; 0x1132 <Pwm_Start+0x316>
			}
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_NO_CONFIG;
     fd8:	85 b5       	in	r24, 0x25	; 37
     fda:	81 60       	ori	r24, 0x01	; 1
     fdc:	85 bd       	out	0x25, r24	; 37
				Ret=E_OK;
				break;
     fde:	c4 c0       	rjmp	.+392    	; 0x1168 <Pwm_Start+0x34c>
	}

	
	case PWM_PRESCALER_8:
	{
		switch(Channel)
     fe0:	83 30       	cpi	r24, 0x03	; 3
     fe2:	18 f4       	brcc	.+6      	; 0xfea <Pwm_Start+0x1ce>
     fe4:	81 30       	cpi	r24, 0x01	; 1
     fe6:	48 f4       	brcc	.+18     	; 0xffa <Pwm_Start+0x1de>
     fe8:	04 c0       	rjmp	.+8      	; 0xff2 <Pwm_Start+0x1d6>
     fea:	83 30       	cpi	r24, 0x03	; 3
     fec:	09 f0       	breq	.+2      	; 0xff0 <Pwm_Start+0x1d4>
     fee:	66 c0       	rjmp	.+204    	; 0x10bc <Pwm_Start+0x2a0>
     ff0:	0a c0       	rjmp	.+20     	; 0x1006 <Pwm_Start+0x1ea>
		{
			case PWM_CH0:
			{
				TCCR0|=PWM_PRESCALER_8_CONFIG;
     ff2:	83 b7       	in	r24, 0x33	; 51
     ff4:	82 60       	ori	r24, 0x02	; 2
     ff6:	83 bf       	out	0x33, r24	; 51
				Ret=E_OK;
				break;
     ff8:	6b c0       	rjmp	.+214    	; 0x10d0 <Pwm_Start+0x2b4>
			}
			case PWM_CH1A:
			case PWM_CH1B:
			{	TCCR1|=PWM_PRESCALER_8_CONFIG;
     ffa:	2e b5       	in	r18, 0x2e	; 46
     ffc:	3f b5       	in	r19, 0x2f	; 47
     ffe:	22 60       	ori	r18, 0x02	; 2
    1000:	3f bd       	out	0x2f, r19	; 47
    1002:	2e bd       	out	0x2e, r18	; 46
				Ret=E_OK;
				break;
    1004:	5b c0       	rjmp	.+182    	; 0x10bc <Pwm_Start+0x2a0>
			}
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_8_CONFIG;
    1006:	85 b5       	in	r24, 0x25	; 37
    1008:	82 60       	ori	r24, 0x02	; 2
    100a:	85 bd       	out	0x25, r24	; 37
			Ret=E_OK;	
				break;
    100c:	ad c0       	rjmp	.+346    	; 0x1168 <Pwm_Start+0x34c>
		break;
	}
	
	case PWM_PRESCALER_32:
	{
		switch(Channel)
    100e:	83 30       	cpi	r24, 0x03	; 3
    1010:	09 f0       	breq	.+2      	; 0x1014 <Pwm_Start+0x1f8>
    1012:	54 c0       	rjmp	.+168    	; 0x10bc <Pwm_Start+0x2a0>
		{
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_32_CONFIG_T2;
    1014:	85 b5       	in	r24, 0x25	; 37
    1016:	83 60       	ori	r24, 0x03	; 3
    1018:	85 bd       	out	0x25, r24	; 37
				Ret=E_OK;
				break;
    101a:	a6 c0       	rjmp	.+332    	; 0x1168 <Pwm_Start+0x34c>
		break;
	}
	
	case PWM_PRESCALER_64:
	{
		switch(Channel)
    101c:	83 30       	cpi	r24, 0x03	; 3
    101e:	18 f4       	brcc	.+6      	; 0x1026 <Pwm_Start+0x20a>
    1020:	81 30       	cpi	r24, 0x01	; 1
    1022:	48 f4       	brcc	.+18     	; 0x1036 <Pwm_Start+0x21a>
    1024:	04 c0       	rjmp	.+8      	; 0x102e <Pwm_Start+0x212>
    1026:	83 30       	cpi	r24, 0x03	; 3
    1028:	09 f0       	breq	.+2      	; 0x102c <Pwm_Start+0x210>
    102a:	48 c0       	rjmp	.+144    	; 0x10bc <Pwm_Start+0x2a0>
    102c:	0a c0       	rjmp	.+20     	; 0x1042 <Pwm_Start+0x226>
		{
			case PWM_CH0:
			{
				TCCR0|=PWM_PRESCALER_64_CONFIG;
    102e:	83 b7       	in	r24, 0x33	; 51
    1030:	83 60       	ori	r24, 0x03	; 3
    1032:	83 bf       	out	0x33, r24	; 51
				Ret=E_OK;
				break;
    1034:	4d c0       	rjmp	.+154    	; 0x10d0 <Pwm_Start+0x2b4>
			}
			case PWM_CH1A:
			case PWM_CH1B:
			{	TCCR1|=PWM_PRESCALER_64_CONFIG;
    1036:	2e b5       	in	r18, 0x2e	; 46
    1038:	3f b5       	in	r19, 0x2f	; 47
    103a:	23 60       	ori	r18, 0x03	; 3
    103c:	3f bd       	out	0x2f, r19	; 47
    103e:	2e bd       	out	0x2e, r18	; 46
				Ret=E_OK;
				break;
    1040:	3d c0       	rjmp	.+122    	; 0x10bc <Pwm_Start+0x2a0>
			}
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_64_CONFIG_T2;
    1042:	85 b5       	in	r24, 0x25	; 37
    1044:	84 60       	ori	r24, 0x04	; 4
    1046:	85 bd       	out	0x25, r24	; 37
				Ret=E_OK;
				break;
    1048:	8f c0       	rjmp	.+286    	; 0x1168 <Pwm_Start+0x34c>
		break;
	}
	
	case PWM_PRESCALER_256:
	{
		switch(Channel)
    104a:	83 30       	cpi	r24, 0x03	; 3
    104c:	18 f4       	brcc	.+6      	; 0x1054 <Pwm_Start+0x238>
    104e:	81 30       	cpi	r24, 0x01	; 1
    1050:	40 f4       	brcc	.+16     	; 0x1062 <Pwm_Start+0x246>
    1052:	03 c0       	rjmp	.+6      	; 0x105a <Pwm_Start+0x23e>
    1054:	83 30       	cpi	r24, 0x03	; 3
    1056:	91 f5       	brne	.+100    	; 0x10bc <Pwm_Start+0x2a0>
    1058:	0a c0       	rjmp	.+20     	; 0x106e <Pwm_Start+0x252>
		{
			case PWM_CH0:
			{
				TCCR0|=PWM_PRESCALER_64_CONFIG;
    105a:	83 b7       	in	r24, 0x33	; 51
    105c:	83 60       	ori	r24, 0x03	; 3
    105e:	83 bf       	out	0x33, r24	; 51
				Ret=E_OK;
				break;
    1060:	37 c0       	rjmp	.+110    	; 0x10d0 <Pwm_Start+0x2b4>
			}
			case PWM_CH1A:
			case PWM_CH1B:
			{	TCCR1|=PWM_PRESCALER_64_CONFIG;
    1062:	2e b5       	in	r18, 0x2e	; 46
    1064:	3f b5       	in	r19, 0x2f	; 47
    1066:	23 60       	ori	r18, 0x03	; 3
    1068:	3f bd       	out	0x2f, r19	; 47
    106a:	2e bd       	out	0x2e, r18	; 46
				Ret=E_OK;
				break;
    106c:	27 c0       	rjmp	.+78     	; 0x10bc <Pwm_Start+0x2a0>
			}
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_64_CONFIG_T2;
    106e:	85 b5       	in	r24, 0x25	; 37
    1070:	84 60       	ori	r24, 0x04	; 4
    1072:	85 bd       	out	0x25, r24	; 37
				Ret=E_OK;
				break;
    1074:	79 c0       	rjmp	.+242    	; 0x1168 <Pwm_Start+0x34c>
		break;
	}
	
	case PWM_PRESCALER_128:
	{
		switch(Channel)
    1076:	83 30       	cpi	r24, 0x03	; 3
    1078:	09 f5       	brne	.+66     	; 0x10bc <Pwm_Start+0x2a0>
		{
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_128_CONFIG_T2;
    107a:	85 b5       	in	r24, 0x25	; 37
    107c:	85 60       	ori	r24, 0x05	; 5
    107e:	85 bd       	out	0x25, r24	; 37
				Ret=E_OK;
				break;
    1080:	73 c0       	rjmp	.+230    	; 0x1168 <Pwm_Start+0x34c>
		break;
	}
	
	case PWM_PRESCALER_1024:
	{
		switch(Channel)
    1082:	81 30       	cpi	r24, 0x01	; 1
    1084:	59 f0       	breq	.+22     	; 0x109c <Pwm_Start+0x280>
    1086:	81 30       	cpi	r24, 0x01	; 1
    1088:	28 f0       	brcs	.+10     	; 0x1094 <Pwm_Start+0x278>
    108a:	82 30       	cpi	r24, 0x02	; 2
    108c:	69 f0       	breq	.+26     	; 0x10a8 <Pwm_Start+0x28c>
    108e:	83 30       	cpi	r24, 0x03	; 3
    1090:	a9 f4       	brne	.+42     	; 0x10bc <Pwm_Start+0x2a0>
    1092:	10 c0       	rjmp	.+32     	; 0x10b4 <Pwm_Start+0x298>
		{
			case PWM_CH0:
			{
				TCCR0|=PWM_PRESCALER_1024_CONFIG;
    1094:	83 b7       	in	r24, 0x33	; 51
    1096:	85 60       	ori	r24, 0x05	; 5
    1098:	83 bf       	out	0x33, r24	; 51
				Ret=E_OK;
				break;
    109a:	1a c0       	rjmp	.+52     	; 0x10d0 <Pwm_Start+0x2b4>
			}
			case PWM_CH1A:
			{	TCCR1|=PWM_PRESCALER_NO_CONFIG;
    109c:	8e b5       	in	r24, 0x2e	; 46
    109e:	9f b5       	in	r25, 0x2f	; 47
    10a0:	81 60       	ori	r24, 0x01	; 1
    10a2:	9f bd       	out	0x2f, r25	; 47
    10a4:	8e bd       	out	0x2e, r24	; 46
				Ret=E_OK;
				break;
    10a6:	2a c0       	rjmp	.+84     	; 0x10fc <Pwm_Start+0x2e0>
			}
			case PWM_CH1B:
			{	TCCR1|=PWM_PRESCALER_1024_CONFIG;
    10a8:	8e b5       	in	r24, 0x2e	; 46
    10aa:	9f b5       	in	r25, 0x2f	; 47
    10ac:	85 60       	ori	r24, 0x05	; 5
    10ae:	9f bd       	out	0x2f, r25	; 47
    10b0:	8e bd       	out	0x2e, r24	; 46
				Ret=E_OK;
				break;
    10b2:	3f c0       	rjmp	.+126    	; 0x1132 <Pwm_Start+0x316>
			}
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_1024_CONFIG_T2;
    10b4:	85 b5       	in	r24, 0x25	; 37
    10b6:	87 60       	ori	r24, 0x07	; 7
    10b8:	85 bd       	out	0x25, r24	; 37
				Ret=E_OK;
				break;
    10ba:	56 c0       	rjmp	.+172    	; 0x1168 <Pwm_Start+0x34c>

	
	
}

switch(Channel)
    10bc:	81 30       	cpi	r24, 0x01	; 1
    10be:	f1 f0       	breq	.+60     	; 0x10fc <Pwm_Start+0x2e0>
    10c0:	81 30       	cpi	r24, 0x01	; 1
    10c2:	30 f0       	brcs	.+12     	; 0x10d0 <Pwm_Start+0x2b4>
    10c4:	82 30       	cpi	r24, 0x02	; 2
    10c6:	a9 f1       	breq	.+106    	; 0x1132 <Pwm_Start+0x316>
    10c8:	83 30       	cpi	r24, 0x03	; 3
    10ca:	09 f0       	breq	.+2      	; 0x10ce <Pwm_Start+0x2b2>
    10cc:	63 c0       	rjmp	.+198    	; 0x1194 <Pwm_Start+0x378>
    10ce:	4c c0       	rjmp	.+152    	; 0x1168 <Pwm_Start+0x34c>
		{
			case PWM_CH0:{
			pwm_time_on=MAX_HOLD;
			dutyReal=((float)Duty/(float)FULL_SPEED);
    10d0:	70 e0       	ldi	r23, 0x00	; 0
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__floatunsisf>
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	48 ec       	ldi	r20, 0xC8	; 200
    10e0:	52 e4       	ldi	r21, 0x42	; 66
    10e2:	0e 94 77 09 	call	0x12ee	; 0x12ee <__divsf3>
			pwm_time_on=(float)pwm_time_on*dutyReal;
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	4f e7       	ldi	r20, 0x7F	; 127
    10ec:	53 e4       	ldi	r21, 0x43	; 67
    10ee:	0e 94 99 0a 	call	0x1532	; 0x1532 <__mulsf3>
    10f2:	0e 94 df 09 	call	0x13be	; 0x13be <__fixunssfsi>
			OCR0=pwm_time_on;
    10f6:	6c bf       	out	0x3c, r22	; 60
			Ret=E_OK;
    10f8:	80 e0       	ldi	r24, 0x00	; 0
			break;
    10fa:	4d c0       	rjmp	.+154    	; 0x1196 <Pwm_Start+0x37a>
			}			
			case PWM_CH1A:{
			pwm_time_on=MAX_HOLD;
			dutyReal=((float)Duty/(float)FULL_SPEED);
    10fc:	70 e0       	ldi	r23, 0x00	; 0
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__floatunsisf>
    1106:	20 e0       	ldi	r18, 0x00	; 0
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	48 ec       	ldi	r20, 0xC8	; 200
    110c:	52 e4       	ldi	r21, 0x42	; 66
    110e:	0e 94 77 09 	call	0x12ee	; 0x12ee <__divsf3>
			pwm_time_on=(float)pwm_time_on*dutyReal;
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	4f e7       	ldi	r20, 0x7F	; 127
    1118:	53 e4       	ldi	r21, 0x43	; 67
    111a:	0e 94 99 0a 	call	0x1532	; 0x1532 <__mulsf3>
    111e:	0e 94 df 09 	call	0x13be	; 0x13be <__fixunssfsi>
    1122:	dc 01       	movw	r26, r24
    1124:	cb 01       	movw	r24, r22
			OCR1A=pwm_time_on;
    1126:	9b bd       	out	0x2b, r25	; 43
    1128:	8a bd       	out	0x2a, r24	; 42
			OCR1B=pwm_time_on;
    112a:	99 bd       	out	0x29, r25	; 41
    112c:	88 bd       	out	0x28, r24	; 40
			Ret=E_OK;
    112e:	80 e0       	ldi	r24, 0x00	; 0
			break;
    1130:	32 c0       	rjmp	.+100    	; 0x1196 <Pwm_Start+0x37a>
			}			
			case PWM_CH1B:{
			pwm_time_on=MAX_HOLD;
			dutyReal=((float)Duty/(float)FULL_SPEED);
    1132:	70 e0       	ldi	r23, 0x00	; 0
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__floatunsisf>
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	48 ec       	ldi	r20, 0xC8	; 200
    1142:	52 e4       	ldi	r21, 0x42	; 66
    1144:	0e 94 77 09 	call	0x12ee	; 0x12ee <__divsf3>
			pwm_time_on=(float)pwm_time_on*dutyReal;
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	4f e7       	ldi	r20, 0x7F	; 127
    114e:	53 e4       	ldi	r21, 0x43	; 67
    1150:	0e 94 99 0a 	call	0x1532	; 0x1532 <__mulsf3>
    1154:	0e 94 df 09 	call	0x13be	; 0x13be <__fixunssfsi>
    1158:	dc 01       	movw	r26, r24
    115a:	cb 01       	movw	r24, r22
			OCR1A=pwm_time_on;
    115c:	9b bd       	out	0x2b, r25	; 43
    115e:	8a bd       	out	0x2a, r24	; 42
			OCR1B=pwm_time_on;
    1160:	99 bd       	out	0x29, r25	; 41
    1162:	88 bd       	out	0x28, r24	; 40
			Ret=E_OK;
    1164:	80 e0       	ldi	r24, 0x00	; 0
			break;
    1166:	17 c0       	rjmp	.+46     	; 0x1196 <Pwm_Start+0x37a>
			}
			case PWM_CH2:{
			pwm_time_on=MAX_HOLD;	
			dutyReal=((float)Duty/(float)FULL_SPEED);
    1168:	70 e0       	ldi	r23, 0x00	; 0
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__floatunsisf>
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	48 ec       	ldi	r20, 0xC8	; 200
    1178:	52 e4       	ldi	r21, 0x42	; 66
    117a:	0e 94 77 09 	call	0x12ee	; 0x12ee <__divsf3>
			pwm_time_on=(float)pwm_time_on*dutyReal;
    117e:	20 e0       	ldi	r18, 0x00	; 0
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	4f e7       	ldi	r20, 0x7F	; 127
    1184:	53 e4       	ldi	r21, 0x43	; 67
    1186:	0e 94 99 0a 	call	0x1532	; 0x1532 <__mulsf3>
    118a:	0e 94 df 09 	call	0x13be	; 0x13be <__fixunssfsi>
			OCR2=pwm_time_on;
    118e:	63 bd       	out	0x23, r22	; 35
			Ret=E_OK;
    1190:	80 e0       	ldi	r24, 0x00	; 0
			}			
			break;
    1192:	01 c0       	rjmp	.+2      	; 0x1196 <Pwm_Start+0x37a>
			default:
			Ret=E_NOK;
    1194:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
sgl_is_started=1;
    1196:	91 e0       	ldi	r25, 0x01	; 1
    1198:	90 93 a2 00 	sts	0x00A2, r25
return Ret;
}
    119c:	1f 91       	pop	r17
    119e:	0f 91       	pop	r16
    11a0:	ff 90       	pop	r15
    11a2:	ef 90       	pop	r14
    11a4:	df 90       	pop	r13
    11a6:	cf 90       	pop	r12
    11a8:	08 95       	ret

000011aa <Pwm_Update>:


ERROR_STATUS Pwm_Update(uint8_t Channel,uint8_t Duty,uint32_t Frequncy)
{
uint8_t Ret=0;
if (sgl_is_started == 1)
    11aa:	90 91 a2 00 	lds	r25, 0x00A2
    11ae:	91 30       	cpi	r25, 0x01	; 1
    11b0:	21 f4       	brne	.+8      	; 0x11ba <Pwm_Update+0x10>
{
	Pwm_Start( Channel,Duty,Frequncy);
    11b2:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Pwm_Start>
Ret=E_OK;
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	08 95       	ret
}else{Ret=E_NOK;}
    11ba:	81 e0       	ldi	r24, 0x01	; 1
	

return Ret;
}
    11bc:	08 95       	ret

000011be <Pwm_Stop>:
/*********************************************************************************/

ERROR_STATUS Pwm_Stop(uint8_t Channel)
{
uint8_t Ret=0;
switch(Channel)
    11be:	83 30       	cpi	r24, 0x03	; 3
    11c0:	18 f4       	brcc	.+6      	; 0x11c8 <Pwm_Stop+0xa>
    11c2:	81 30       	cpi	r24, 0x01	; 1
    11c4:	48 f4       	brcc	.+18     	; 0x11d8 <Pwm_Stop+0x1a>
    11c6:	03 c0       	rjmp	.+6      	; 0x11ce <Pwm_Stop+0x10>
    11c8:	83 30       	cpi	r24, 0x03	; 3
    11ca:	81 f4       	brne	.+32     	; 0x11ec <Pwm_Stop+0x2e>
    11cc:	0a c0       	rjmp	.+20     	; 0x11e2 <Pwm_Stop+0x24>
{
	case PWM_CH0:
	TCCR0 &=TIMER_STOPT02;
    11ce:	83 b7       	in	r24, 0x33	; 51
    11d0:	88 7f       	andi	r24, 0xF8	; 248
    11d2:	83 bf       	out	0x33, r24	; 51
	Ret=E_OK;
    11d4:	80 e0       	ldi	r24, 0x00	; 0
	break;
    11d6:	08 95       	ret

	case PWM_CH1A:
	case PWM_CH1B:
	TCCR0 &=TIMER_STOPT1;
    11d8:	83 b7       	in	r24, 0x33	; 51
    11da:	88 7f       	andi	r24, 0xF8	; 248
    11dc:	83 bf       	out	0x33, r24	; 51
	Ret=E_OK;
    11de:	80 e0       	ldi	r24, 0x00	; 0
	break;
    11e0:	08 95       	ret


	case PWM_CH2:
	TCCR2 &=TIMER_STOPT02;
    11e2:	85 b5       	in	r24, 0x25	; 37
    11e4:	88 7f       	andi	r24, 0xF8	; 248
    11e6:	85 bd       	out	0x25, r24	; 37
	Ret=E_OK;
    11e8:	80 e0       	ldi	r24, 0x00	; 0
	break;
    11ea:	08 95       	ret
	default:
	Ret=E_NOK;
    11ec:	81 e0       	ldi	r24, 0x01	; 1
	break;
}

return Ret;
}
    11ee:	08 95       	ret

000011f0 <Steering_Init>:


ERROR_STATUS Steering_Init(void)
{
	uint8_t ret=0;
	ret=Motor_Init(MOTOR_1|MOTOR_2);
    11f0:	83 e0       	ldi	r24, 0x03	; 3
    11f2:	0e 94 9c 05 	call	0xb38	; 0xb38 <Motor_Init>
	return ret;
}
    11f6:	08 95       	ret

000011f8 <Steering_SteerCar>:


ERROR_STATUS Steering_SteerCar(uint8_t Steering_CarCmd, uint8_t speed)
{
    11f8:	cf 93       	push	r28
    11fa:	c6 2f       	mov	r28, r22
	uint8_t ret=0;
		switch(Steering_CarCmd)
    11fc:	82 30       	cpi	r24, 0x02	; 2
    11fe:	99 f0       	breq	.+38     	; 0x1226 <Steering_SteerCar+0x2e>
    1200:	83 30       	cpi	r24, 0x03	; 3
    1202:	18 f4       	brcc	.+6      	; 0x120a <Steering_SteerCar+0x12>
    1204:	81 30       	cpi	r24, 0x01	; 1
    1206:	a1 f5       	brne	.+104    	; 0x1270 <Steering_SteerCar+0x78>
    1208:	05 c0       	rjmp	.+10     	; 0x1214 <Steering_SteerCar+0x1c>
    120a:	83 30       	cpi	r24, 0x03	; 3
    120c:	19 f1       	breq	.+70     	; 0x1254 <Steering_SteerCar+0x5c>
    120e:	84 30       	cpi	r24, 0x04	; 4
    1210:	79 f5       	brne	.+94     	; 0x1270 <Steering_SteerCar+0x78>
    1212:	12 c0       	rjmp	.+36     	; 0x1238 <Steering_SteerCar+0x40>
	{
		case CAR_FORWARD:
			ret= Motor_Direction(MOTOR_1|MOTOR_2, Steering_CarCmd);
    1214:	83 e0       	ldi	r24, 0x03	; 3
    1216:	61 e0       	ldi	r22, 0x01	; 1
    1218:	0e 94 cb 05 	call	0xb96	; 0xb96 <Motor_Direction>

			ret=Motor_Start(MOTOR_1|MOTOR_2,speed);
    121c:	83 e0       	ldi	r24, 0x03	; 3
    121e:	6c 2f       	mov	r22, r28
    1220:	0e 94 74 06 	call	0xce8	; 0xce8 <Motor_Start>
			break;
    1224:	26 c0       	rjmp	.+76     	; 0x1272 <Steering_SteerCar+0x7a>
			case CAR_BACKWARD:
			ret= Motor_Direction(MOTOR_1|MOTOR_2, Steering_CarCmd);
    1226:	83 e0       	ldi	r24, 0x03	; 3
    1228:	62 e0       	ldi	r22, 0x02	; 2
    122a:	0e 94 cb 05 	call	0xb96	; 0xb96 <Motor_Direction>

			ret=Motor_Start(MOTOR_1|MOTOR_2,speed);
    122e:	83 e0       	ldi	r24, 0x03	; 3
    1230:	6c 2f       	mov	r22, r28
    1232:	0e 94 74 06 	call	0xce8	; 0xce8 <Motor_Start>
			break;
    1236:	1d c0       	rjmp	.+58     	; 0x1272 <Steering_SteerCar+0x7a>
			case CAR_LEFT:
			ret= Motor_Direction(MOTOR_1|MOTOR_2, CAR_FORWARD);
    1238:	83 e0       	ldi	r24, 0x03	; 3
    123a:	61 e0       	ldi	r22, 0x01	; 1
    123c:	0e 94 cb 05 	call	0xb96	; 0xb96 <Motor_Direction>

			ret=Motor_Start(MOTOR_1,speed-10);
    1240:	6c 2f       	mov	r22, r28
    1242:	6a 50       	subi	r22, 0x0A	; 10
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	0e 94 74 06 	call	0xce8	; 0xce8 <Motor_Start>
			ret=Motor_Start(MOTOR_2,speed);
    124a:	82 e0       	ldi	r24, 0x02	; 2
    124c:	6c 2f       	mov	r22, r28
    124e:	0e 94 74 06 	call	0xce8	; 0xce8 <Motor_Start>
			break;
    1252:	0f c0       	rjmp	.+30     	; 0x1272 <Steering_SteerCar+0x7a>
			case CAR_RIGHT:
			ret= Motor_Direction(MOTOR_1|MOTOR_2, CAR_FORWARD);
    1254:	83 e0       	ldi	r24, 0x03	; 3
    1256:	61 e0       	ldi	r22, 0x01	; 1
    1258:	0e 94 cb 05 	call	0xb96	; 0xb96 <Motor_Direction>

			ret=Motor_Start(MOTOR_1,speed);
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	6c 2f       	mov	r22, r28
    1260:	0e 94 74 06 	call	0xce8	; 0xce8 <Motor_Start>
			ret=Motor_Start(MOTOR_2,speed-10);
    1264:	6c 2f       	mov	r22, r28
    1266:	6a 50       	subi	r22, 0x0A	; 10
    1268:	82 e0       	ldi	r24, 0x02	; 2
    126a:	0e 94 74 06 	call	0xce8	; 0xce8 <Motor_Start>
			break;
    126e:	01 c0       	rjmp	.+2      	; 0x1272 <Steering_SteerCar+0x7a>
}


ERROR_STATUS Steering_SteerCar(uint8_t Steering_CarCmd, uint8_t speed)
{
	uint8_t ret=0;
    1270:	80 e0       	ldi	r24, 0x00	; 0
			break;
	}
	
	
return ret;
    1272:	cf 91       	pop	r28
    1274:	08 95       	ret

00001276 <Us_Init>:
 *                                                                                                  *
 ***************************************************************************************************/

ERROR_STATUS Us_Init(void)
{uint8_t Ret;
Ret=DIO_init(&US_Configuration);
    1276:	83 e8       	ldi	r24, 0x83	; 131
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	0e 94 6b 00 	call	0xd6	; 0xd6 <DIO_init>
Ret=Icu_Init(&ICU_Configuration);
    127e:	8c e6       	ldi	r24, 0x6C	; 108
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	0e 94 4a 01 	call	0x294	; 0x294 <Icu_Init>
return Ret;
}
    1286:	08 95       	ret

00001288 <Us_Trigger>:
ERROR_STATUS Us_Trigger(void)
{uint8_t Ret=0;
Ret=DIO_Write(GPIOC,BIT4,HIGH);	
    1288:	82 e0       	ldi	r24, 0x02	; 2
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	60 e1       	ldi	r22, 0x10	; 16
    128e:	70 e0       	ldi	r23, 0x00	; 0
    1290:	4f ef       	ldi	r20, 0xFF	; 255
    1292:	50 e0       	ldi	r21, 0x00	; 0
    1294:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_Write>
return Ret;	
}
    1298:	08 95       	ret

0000129a <Us_GetDistance>:


ERROR_STATUS Us_GetDistance(uint16_t *Distance)
{uint8_t Ret=0;
    129a:	ef 92       	push	r14
    129c:	ff 92       	push	r15
    129e:	1f 93       	push	r17
    12a0:	cf 93       	push	r28
    12a2:	df 93       	push	r29
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <Us_GetDistance+0xc>
    12a6:	00 d0       	rcall	.+0      	; 0x12a8 <Us_GetDistance+0xe>
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	7c 01       	movw	r14, r24
	uint32_t u32l_Time;
	Ret=Icu_ReadTime(ICU_CH2,ICU_RISE_TO_FALL,&u32l_Time);
    12ae:	82 e0       	ldi	r24, 0x02	; 2
    12b0:	61 e0       	ldi	r22, 0x01	; 1
    12b2:	ae 01       	movw	r20, r28
    12b4:	4f 5f       	subi	r20, 0xFF	; 255
    12b6:	5f 4f       	sbci	r21, 0xFF	; 255
    12b8:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Icu_ReadTime>
    12bc:	18 2f       	mov	r17, r24
	*Distance=u32l_Time/58;
    12be:	69 81       	ldd	r22, Y+1	; 0x01
    12c0:	7a 81       	ldd	r23, Y+2	; 0x02
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	9c 81       	ldd	r25, Y+4	; 0x04
    12c6:	2a e3       	ldi	r18, 0x3A	; 58
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	40 e0       	ldi	r20, 0x00	; 0
    12cc:	50 e0       	ldi	r21, 0x00	; 0
    12ce:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__udivmodsi4>
    12d2:	f7 01       	movw	r30, r14
    12d4:	31 83       	std	Z+1, r19	; 0x01
    12d6:	20 83       	st	Z, r18
	return Ret;
}
    12d8:	81 2f       	mov	r24, r17
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	df 91       	pop	r29
    12e4:	cf 91       	pop	r28
    12e6:	1f 91       	pop	r17
    12e8:	ff 90       	pop	r15
    12ea:	ef 90       	pop	r14
    12ec:	08 95       	ret

000012ee <__divsf3>:
    12ee:	0c d0       	rcall	.+24     	; 0x1308 <__divsf3x>
    12f0:	e6 c0       	rjmp	.+460    	; 0x14be <__fp_round>
    12f2:	de d0       	rcall	.+444    	; 0x14b0 <__fp_pscB>
    12f4:	40 f0       	brcs	.+16     	; 0x1306 <__divsf3+0x18>
    12f6:	d5 d0       	rcall	.+426    	; 0x14a2 <__fp_pscA>
    12f8:	30 f0       	brcs	.+12     	; 0x1306 <__divsf3+0x18>
    12fa:	21 f4       	brne	.+8      	; 0x1304 <__divsf3+0x16>
    12fc:	5f 3f       	cpi	r21, 0xFF	; 255
    12fe:	19 f0       	breq	.+6      	; 0x1306 <__divsf3+0x18>
    1300:	c7 c0       	rjmp	.+398    	; 0x1490 <__fp_inf>
    1302:	51 11       	cpse	r21, r1
    1304:	10 c1       	rjmp	.+544    	; 0x1526 <__fp_szero>
    1306:	ca c0       	rjmp	.+404    	; 0x149c <__fp_nan>

00001308 <__divsf3x>:
    1308:	eb d0       	rcall	.+470    	; 0x14e0 <__fp_split3>
    130a:	98 f3       	brcs	.-26     	; 0x12f2 <__divsf3+0x4>

0000130c <__divsf3_pse>:
    130c:	99 23       	and	r25, r25
    130e:	c9 f3       	breq	.-14     	; 0x1302 <__divsf3+0x14>
    1310:	55 23       	and	r21, r21
    1312:	b1 f3       	breq	.-20     	; 0x1300 <__divsf3+0x12>
    1314:	95 1b       	sub	r25, r21
    1316:	55 0b       	sbc	r21, r21
    1318:	bb 27       	eor	r27, r27
    131a:	aa 27       	eor	r26, r26
    131c:	62 17       	cp	r22, r18
    131e:	73 07       	cpc	r23, r19
    1320:	84 07       	cpc	r24, r20
    1322:	38 f0       	brcs	.+14     	; 0x1332 <__divsf3_pse+0x26>
    1324:	9f 5f       	subi	r25, 0xFF	; 255
    1326:	5f 4f       	sbci	r21, 0xFF	; 255
    1328:	22 0f       	add	r18, r18
    132a:	33 1f       	adc	r19, r19
    132c:	44 1f       	adc	r20, r20
    132e:	aa 1f       	adc	r26, r26
    1330:	a9 f3       	breq	.-22     	; 0x131c <__divsf3_pse+0x10>
    1332:	33 d0       	rcall	.+102    	; 0x139a <__divsf3_pse+0x8e>
    1334:	0e 2e       	mov	r0, r30
    1336:	3a f0       	brmi	.+14     	; 0x1346 <__divsf3_pse+0x3a>
    1338:	e0 e8       	ldi	r30, 0x80	; 128
    133a:	30 d0       	rcall	.+96     	; 0x139c <__divsf3_pse+0x90>
    133c:	91 50       	subi	r25, 0x01	; 1
    133e:	50 40       	sbci	r21, 0x00	; 0
    1340:	e6 95       	lsr	r30
    1342:	00 1c       	adc	r0, r0
    1344:	ca f7       	brpl	.-14     	; 0x1338 <__divsf3_pse+0x2c>
    1346:	29 d0       	rcall	.+82     	; 0x139a <__divsf3_pse+0x8e>
    1348:	fe 2f       	mov	r31, r30
    134a:	27 d0       	rcall	.+78     	; 0x139a <__divsf3_pse+0x8e>
    134c:	66 0f       	add	r22, r22
    134e:	77 1f       	adc	r23, r23
    1350:	88 1f       	adc	r24, r24
    1352:	bb 1f       	adc	r27, r27
    1354:	26 17       	cp	r18, r22
    1356:	37 07       	cpc	r19, r23
    1358:	48 07       	cpc	r20, r24
    135a:	ab 07       	cpc	r26, r27
    135c:	b0 e8       	ldi	r27, 0x80	; 128
    135e:	09 f0       	breq	.+2      	; 0x1362 <__divsf3_pse+0x56>
    1360:	bb 0b       	sbc	r27, r27
    1362:	80 2d       	mov	r24, r0
    1364:	bf 01       	movw	r22, r30
    1366:	ff 27       	eor	r31, r31
    1368:	93 58       	subi	r25, 0x83	; 131
    136a:	5f 4f       	sbci	r21, 0xFF	; 255
    136c:	2a f0       	brmi	.+10     	; 0x1378 <__divsf3_pse+0x6c>
    136e:	9e 3f       	cpi	r25, 0xFE	; 254
    1370:	51 05       	cpc	r21, r1
    1372:	68 f0       	brcs	.+26     	; 0x138e <__divsf3_pse+0x82>
    1374:	8d c0       	rjmp	.+282    	; 0x1490 <__fp_inf>
    1376:	d7 c0       	rjmp	.+430    	; 0x1526 <__fp_szero>
    1378:	5f 3f       	cpi	r21, 0xFF	; 255
    137a:	ec f3       	brlt	.-6      	; 0x1376 <__divsf3_pse+0x6a>
    137c:	98 3e       	cpi	r25, 0xE8	; 232
    137e:	dc f3       	brlt	.-10     	; 0x1376 <__divsf3_pse+0x6a>
    1380:	86 95       	lsr	r24
    1382:	77 95       	ror	r23
    1384:	67 95       	ror	r22
    1386:	b7 95       	ror	r27
    1388:	f7 95       	ror	r31
    138a:	9f 5f       	subi	r25, 0xFF	; 255
    138c:	c9 f7       	brne	.-14     	; 0x1380 <__divsf3_pse+0x74>
    138e:	88 0f       	add	r24, r24
    1390:	91 1d       	adc	r25, r1
    1392:	96 95       	lsr	r25
    1394:	87 95       	ror	r24
    1396:	97 f9       	bld	r25, 7
    1398:	08 95       	ret
    139a:	e1 e0       	ldi	r30, 0x01	; 1
    139c:	66 0f       	add	r22, r22
    139e:	77 1f       	adc	r23, r23
    13a0:	88 1f       	adc	r24, r24
    13a2:	bb 1f       	adc	r27, r27
    13a4:	62 17       	cp	r22, r18
    13a6:	73 07       	cpc	r23, r19
    13a8:	84 07       	cpc	r24, r20
    13aa:	ba 07       	cpc	r27, r26
    13ac:	20 f0       	brcs	.+8      	; 0x13b6 <__divsf3_pse+0xaa>
    13ae:	62 1b       	sub	r22, r18
    13b0:	73 0b       	sbc	r23, r19
    13b2:	84 0b       	sbc	r24, r20
    13b4:	ba 0b       	sbc	r27, r26
    13b6:	ee 1f       	adc	r30, r30
    13b8:	88 f7       	brcc	.-30     	; 0x139c <__divsf3_pse+0x90>
    13ba:	e0 95       	com	r30
    13bc:	08 95       	ret

000013be <__fixunssfsi>:
    13be:	98 d0       	rcall	.+304    	; 0x14f0 <__fp_splitA>
    13c0:	88 f0       	brcs	.+34     	; 0x13e4 <__fixunssfsi+0x26>
    13c2:	9f 57       	subi	r25, 0x7F	; 127
    13c4:	90 f0       	brcs	.+36     	; 0x13ea <__fixunssfsi+0x2c>
    13c6:	b9 2f       	mov	r27, r25
    13c8:	99 27       	eor	r25, r25
    13ca:	b7 51       	subi	r27, 0x17	; 23
    13cc:	a0 f0       	brcs	.+40     	; 0x13f6 <__fixunssfsi+0x38>
    13ce:	d1 f0       	breq	.+52     	; 0x1404 <__fixunssfsi+0x46>
    13d0:	66 0f       	add	r22, r22
    13d2:	77 1f       	adc	r23, r23
    13d4:	88 1f       	adc	r24, r24
    13d6:	99 1f       	adc	r25, r25
    13d8:	1a f0       	brmi	.+6      	; 0x13e0 <__fixunssfsi+0x22>
    13da:	ba 95       	dec	r27
    13dc:	c9 f7       	brne	.-14     	; 0x13d0 <__fixunssfsi+0x12>
    13de:	12 c0       	rjmp	.+36     	; 0x1404 <__fixunssfsi+0x46>
    13e0:	b1 30       	cpi	r27, 0x01	; 1
    13e2:	81 f0       	breq	.+32     	; 0x1404 <__fixunssfsi+0x46>
    13e4:	9f d0       	rcall	.+318    	; 0x1524 <__fp_zero>
    13e6:	b1 e0       	ldi	r27, 0x01	; 1
    13e8:	08 95       	ret
    13ea:	9c c0       	rjmp	.+312    	; 0x1524 <__fp_zero>
    13ec:	67 2f       	mov	r22, r23
    13ee:	78 2f       	mov	r23, r24
    13f0:	88 27       	eor	r24, r24
    13f2:	b8 5f       	subi	r27, 0xF8	; 248
    13f4:	39 f0       	breq	.+14     	; 0x1404 <__fixunssfsi+0x46>
    13f6:	b9 3f       	cpi	r27, 0xF9	; 249
    13f8:	cc f3       	brlt	.-14     	; 0x13ec <__fixunssfsi+0x2e>
    13fa:	86 95       	lsr	r24
    13fc:	77 95       	ror	r23
    13fe:	67 95       	ror	r22
    1400:	b3 95       	inc	r27
    1402:	d9 f7       	brne	.-10     	; 0x13fa <__fixunssfsi+0x3c>
    1404:	3e f4       	brtc	.+14     	; 0x1414 <__fixunssfsi+0x56>
    1406:	90 95       	com	r25
    1408:	80 95       	com	r24
    140a:	70 95       	com	r23
    140c:	61 95       	neg	r22
    140e:	7f 4f       	sbci	r23, 0xFF	; 255
    1410:	8f 4f       	sbci	r24, 0xFF	; 255
    1412:	9f 4f       	sbci	r25, 0xFF	; 255
    1414:	08 95       	ret

00001416 <__floatunsisf>:
    1416:	e8 94       	clt
    1418:	09 c0       	rjmp	.+18     	; 0x142c <__floatsisf+0x12>

0000141a <__floatsisf>:
    141a:	97 fb       	bst	r25, 7
    141c:	3e f4       	brtc	.+14     	; 0x142c <__floatsisf+0x12>
    141e:	90 95       	com	r25
    1420:	80 95       	com	r24
    1422:	70 95       	com	r23
    1424:	61 95       	neg	r22
    1426:	7f 4f       	sbci	r23, 0xFF	; 255
    1428:	8f 4f       	sbci	r24, 0xFF	; 255
    142a:	9f 4f       	sbci	r25, 0xFF	; 255
    142c:	99 23       	and	r25, r25
    142e:	a9 f0       	breq	.+42     	; 0x145a <__floatsisf+0x40>
    1430:	f9 2f       	mov	r31, r25
    1432:	96 e9       	ldi	r25, 0x96	; 150
    1434:	bb 27       	eor	r27, r27
    1436:	93 95       	inc	r25
    1438:	f6 95       	lsr	r31
    143a:	87 95       	ror	r24
    143c:	77 95       	ror	r23
    143e:	67 95       	ror	r22
    1440:	b7 95       	ror	r27
    1442:	f1 11       	cpse	r31, r1
    1444:	f8 cf       	rjmp	.-16     	; 0x1436 <__floatsisf+0x1c>
    1446:	fa f4       	brpl	.+62     	; 0x1486 <__floatsisf+0x6c>
    1448:	bb 0f       	add	r27, r27
    144a:	11 f4       	brne	.+4      	; 0x1450 <__floatsisf+0x36>
    144c:	60 ff       	sbrs	r22, 0
    144e:	1b c0       	rjmp	.+54     	; 0x1486 <__floatsisf+0x6c>
    1450:	6f 5f       	subi	r22, 0xFF	; 255
    1452:	7f 4f       	sbci	r23, 0xFF	; 255
    1454:	8f 4f       	sbci	r24, 0xFF	; 255
    1456:	9f 4f       	sbci	r25, 0xFF	; 255
    1458:	16 c0       	rjmp	.+44     	; 0x1486 <__floatsisf+0x6c>
    145a:	88 23       	and	r24, r24
    145c:	11 f0       	breq	.+4      	; 0x1462 <__floatsisf+0x48>
    145e:	96 e9       	ldi	r25, 0x96	; 150
    1460:	11 c0       	rjmp	.+34     	; 0x1484 <__floatsisf+0x6a>
    1462:	77 23       	and	r23, r23
    1464:	21 f0       	breq	.+8      	; 0x146e <__floatsisf+0x54>
    1466:	9e e8       	ldi	r25, 0x8E	; 142
    1468:	87 2f       	mov	r24, r23
    146a:	76 2f       	mov	r23, r22
    146c:	05 c0       	rjmp	.+10     	; 0x1478 <__floatsisf+0x5e>
    146e:	66 23       	and	r22, r22
    1470:	71 f0       	breq	.+28     	; 0x148e <__floatsisf+0x74>
    1472:	96 e8       	ldi	r25, 0x86	; 134
    1474:	86 2f       	mov	r24, r22
    1476:	70 e0       	ldi	r23, 0x00	; 0
    1478:	60 e0       	ldi	r22, 0x00	; 0
    147a:	2a f0       	brmi	.+10     	; 0x1486 <__floatsisf+0x6c>
    147c:	9a 95       	dec	r25
    147e:	66 0f       	add	r22, r22
    1480:	77 1f       	adc	r23, r23
    1482:	88 1f       	adc	r24, r24
    1484:	da f7       	brpl	.-10     	; 0x147c <__floatsisf+0x62>
    1486:	88 0f       	add	r24, r24
    1488:	96 95       	lsr	r25
    148a:	87 95       	ror	r24
    148c:	97 f9       	bld	r25, 7
    148e:	08 95       	ret

00001490 <__fp_inf>:
    1490:	97 f9       	bld	r25, 7
    1492:	9f 67       	ori	r25, 0x7F	; 127
    1494:	80 e8       	ldi	r24, 0x80	; 128
    1496:	70 e0       	ldi	r23, 0x00	; 0
    1498:	60 e0       	ldi	r22, 0x00	; 0
    149a:	08 95       	ret

0000149c <__fp_nan>:
    149c:	9f ef       	ldi	r25, 0xFF	; 255
    149e:	80 ec       	ldi	r24, 0xC0	; 192
    14a0:	08 95       	ret

000014a2 <__fp_pscA>:
    14a2:	00 24       	eor	r0, r0
    14a4:	0a 94       	dec	r0
    14a6:	16 16       	cp	r1, r22
    14a8:	17 06       	cpc	r1, r23
    14aa:	18 06       	cpc	r1, r24
    14ac:	09 06       	cpc	r0, r25
    14ae:	08 95       	ret

000014b0 <__fp_pscB>:
    14b0:	00 24       	eor	r0, r0
    14b2:	0a 94       	dec	r0
    14b4:	12 16       	cp	r1, r18
    14b6:	13 06       	cpc	r1, r19
    14b8:	14 06       	cpc	r1, r20
    14ba:	05 06       	cpc	r0, r21
    14bc:	08 95       	ret

000014be <__fp_round>:
    14be:	09 2e       	mov	r0, r25
    14c0:	03 94       	inc	r0
    14c2:	00 0c       	add	r0, r0
    14c4:	11 f4       	brne	.+4      	; 0x14ca <__fp_round+0xc>
    14c6:	88 23       	and	r24, r24
    14c8:	52 f0       	brmi	.+20     	; 0x14de <__fp_round+0x20>
    14ca:	bb 0f       	add	r27, r27
    14cc:	40 f4       	brcc	.+16     	; 0x14de <__fp_round+0x20>
    14ce:	bf 2b       	or	r27, r31
    14d0:	11 f4       	brne	.+4      	; 0x14d6 <__fp_round+0x18>
    14d2:	60 ff       	sbrs	r22, 0
    14d4:	04 c0       	rjmp	.+8      	; 0x14de <__fp_round+0x20>
    14d6:	6f 5f       	subi	r22, 0xFF	; 255
    14d8:	7f 4f       	sbci	r23, 0xFF	; 255
    14da:	8f 4f       	sbci	r24, 0xFF	; 255
    14dc:	9f 4f       	sbci	r25, 0xFF	; 255
    14de:	08 95       	ret

000014e0 <__fp_split3>:
    14e0:	57 fd       	sbrc	r21, 7
    14e2:	90 58       	subi	r25, 0x80	; 128
    14e4:	44 0f       	add	r20, r20
    14e6:	55 1f       	adc	r21, r21
    14e8:	59 f0       	breq	.+22     	; 0x1500 <__fp_splitA+0x10>
    14ea:	5f 3f       	cpi	r21, 0xFF	; 255
    14ec:	71 f0       	breq	.+28     	; 0x150a <__fp_splitA+0x1a>
    14ee:	47 95       	ror	r20

000014f0 <__fp_splitA>:
    14f0:	88 0f       	add	r24, r24
    14f2:	97 fb       	bst	r25, 7
    14f4:	99 1f       	adc	r25, r25
    14f6:	61 f0       	breq	.+24     	; 0x1510 <__fp_splitA+0x20>
    14f8:	9f 3f       	cpi	r25, 0xFF	; 255
    14fa:	79 f0       	breq	.+30     	; 0x151a <__fp_splitA+0x2a>
    14fc:	87 95       	ror	r24
    14fe:	08 95       	ret
    1500:	12 16       	cp	r1, r18
    1502:	13 06       	cpc	r1, r19
    1504:	14 06       	cpc	r1, r20
    1506:	55 1f       	adc	r21, r21
    1508:	f2 cf       	rjmp	.-28     	; 0x14ee <__fp_split3+0xe>
    150a:	46 95       	lsr	r20
    150c:	f1 df       	rcall	.-30     	; 0x14f0 <__fp_splitA>
    150e:	08 c0       	rjmp	.+16     	; 0x1520 <__fp_splitA+0x30>
    1510:	16 16       	cp	r1, r22
    1512:	17 06       	cpc	r1, r23
    1514:	18 06       	cpc	r1, r24
    1516:	99 1f       	adc	r25, r25
    1518:	f1 cf       	rjmp	.-30     	; 0x14fc <__fp_splitA+0xc>
    151a:	86 95       	lsr	r24
    151c:	71 05       	cpc	r23, r1
    151e:	61 05       	cpc	r22, r1
    1520:	08 94       	sec
    1522:	08 95       	ret

00001524 <__fp_zero>:
    1524:	e8 94       	clt

00001526 <__fp_szero>:
    1526:	bb 27       	eor	r27, r27
    1528:	66 27       	eor	r22, r22
    152a:	77 27       	eor	r23, r23
    152c:	cb 01       	movw	r24, r22
    152e:	97 f9       	bld	r25, 7
    1530:	08 95       	ret

00001532 <__mulsf3>:
    1532:	0b d0       	rcall	.+22     	; 0x154a <__mulsf3x>
    1534:	c4 cf       	rjmp	.-120    	; 0x14be <__fp_round>
    1536:	b5 df       	rcall	.-150    	; 0x14a2 <__fp_pscA>
    1538:	28 f0       	brcs	.+10     	; 0x1544 <__mulsf3+0x12>
    153a:	ba df       	rcall	.-140    	; 0x14b0 <__fp_pscB>
    153c:	18 f0       	brcs	.+6      	; 0x1544 <__mulsf3+0x12>
    153e:	95 23       	and	r25, r21
    1540:	09 f0       	breq	.+2      	; 0x1544 <__mulsf3+0x12>
    1542:	a6 cf       	rjmp	.-180    	; 0x1490 <__fp_inf>
    1544:	ab cf       	rjmp	.-170    	; 0x149c <__fp_nan>
    1546:	11 24       	eor	r1, r1
    1548:	ee cf       	rjmp	.-36     	; 0x1526 <__fp_szero>

0000154a <__mulsf3x>:
    154a:	ca df       	rcall	.-108    	; 0x14e0 <__fp_split3>
    154c:	a0 f3       	brcs	.-24     	; 0x1536 <__mulsf3+0x4>

0000154e <__mulsf3_pse>:
    154e:	95 9f       	mul	r25, r21
    1550:	d1 f3       	breq	.-12     	; 0x1546 <__mulsf3+0x14>
    1552:	95 0f       	add	r25, r21
    1554:	50 e0       	ldi	r21, 0x00	; 0
    1556:	55 1f       	adc	r21, r21
    1558:	62 9f       	mul	r22, r18
    155a:	f0 01       	movw	r30, r0
    155c:	72 9f       	mul	r23, r18
    155e:	bb 27       	eor	r27, r27
    1560:	f0 0d       	add	r31, r0
    1562:	b1 1d       	adc	r27, r1
    1564:	63 9f       	mul	r22, r19
    1566:	aa 27       	eor	r26, r26
    1568:	f0 0d       	add	r31, r0
    156a:	b1 1d       	adc	r27, r1
    156c:	aa 1f       	adc	r26, r26
    156e:	64 9f       	mul	r22, r20
    1570:	66 27       	eor	r22, r22
    1572:	b0 0d       	add	r27, r0
    1574:	a1 1d       	adc	r26, r1
    1576:	66 1f       	adc	r22, r22
    1578:	82 9f       	mul	r24, r18
    157a:	22 27       	eor	r18, r18
    157c:	b0 0d       	add	r27, r0
    157e:	a1 1d       	adc	r26, r1
    1580:	62 1f       	adc	r22, r18
    1582:	73 9f       	mul	r23, r19
    1584:	b0 0d       	add	r27, r0
    1586:	a1 1d       	adc	r26, r1
    1588:	62 1f       	adc	r22, r18
    158a:	83 9f       	mul	r24, r19
    158c:	a0 0d       	add	r26, r0
    158e:	61 1d       	adc	r22, r1
    1590:	22 1f       	adc	r18, r18
    1592:	74 9f       	mul	r23, r20
    1594:	33 27       	eor	r19, r19
    1596:	a0 0d       	add	r26, r0
    1598:	61 1d       	adc	r22, r1
    159a:	23 1f       	adc	r18, r19
    159c:	84 9f       	mul	r24, r20
    159e:	60 0d       	add	r22, r0
    15a0:	21 1d       	adc	r18, r1
    15a2:	82 2f       	mov	r24, r18
    15a4:	76 2f       	mov	r23, r22
    15a6:	6a 2f       	mov	r22, r26
    15a8:	11 24       	eor	r1, r1
    15aa:	9f 57       	subi	r25, 0x7F	; 127
    15ac:	50 40       	sbci	r21, 0x00	; 0
    15ae:	8a f0       	brmi	.+34     	; 0x15d2 <__mulsf3_pse+0x84>
    15b0:	e1 f0       	breq	.+56     	; 0x15ea <__mulsf3_pse+0x9c>
    15b2:	88 23       	and	r24, r24
    15b4:	4a f0       	brmi	.+18     	; 0x15c8 <__mulsf3_pse+0x7a>
    15b6:	ee 0f       	add	r30, r30
    15b8:	ff 1f       	adc	r31, r31
    15ba:	bb 1f       	adc	r27, r27
    15bc:	66 1f       	adc	r22, r22
    15be:	77 1f       	adc	r23, r23
    15c0:	88 1f       	adc	r24, r24
    15c2:	91 50       	subi	r25, 0x01	; 1
    15c4:	50 40       	sbci	r21, 0x00	; 0
    15c6:	a9 f7       	brne	.-22     	; 0x15b2 <__mulsf3_pse+0x64>
    15c8:	9e 3f       	cpi	r25, 0xFE	; 254
    15ca:	51 05       	cpc	r21, r1
    15cc:	70 f0       	brcs	.+28     	; 0x15ea <__mulsf3_pse+0x9c>
    15ce:	60 cf       	rjmp	.-320    	; 0x1490 <__fp_inf>
    15d0:	aa cf       	rjmp	.-172    	; 0x1526 <__fp_szero>
    15d2:	5f 3f       	cpi	r21, 0xFF	; 255
    15d4:	ec f3       	brlt	.-6      	; 0x15d0 <__mulsf3_pse+0x82>
    15d6:	98 3e       	cpi	r25, 0xE8	; 232
    15d8:	dc f3       	brlt	.-10     	; 0x15d0 <__mulsf3_pse+0x82>
    15da:	86 95       	lsr	r24
    15dc:	77 95       	ror	r23
    15de:	67 95       	ror	r22
    15e0:	b7 95       	ror	r27
    15e2:	f7 95       	ror	r31
    15e4:	e7 95       	ror	r30
    15e6:	9f 5f       	subi	r25, 0xFF	; 255
    15e8:	c1 f7       	brne	.-16     	; 0x15da <__mulsf3_pse+0x8c>
    15ea:	fe 2b       	or	r31, r30
    15ec:	88 0f       	add	r24, r24
    15ee:	91 1d       	adc	r25, r1
    15f0:	96 95       	lsr	r25
    15f2:	87 95       	ror	r24
    15f4:	97 f9       	bld	r25, 7
    15f6:	08 95       	ret

000015f8 <__udivmodsi4>:
    15f8:	a1 e2       	ldi	r26, 0x21	; 33
    15fa:	1a 2e       	mov	r1, r26
    15fc:	aa 1b       	sub	r26, r26
    15fe:	bb 1b       	sub	r27, r27
    1600:	fd 01       	movw	r30, r26
    1602:	0d c0       	rjmp	.+26     	; 0x161e <__udivmodsi4_ep>

00001604 <__udivmodsi4_loop>:
    1604:	aa 1f       	adc	r26, r26
    1606:	bb 1f       	adc	r27, r27
    1608:	ee 1f       	adc	r30, r30
    160a:	ff 1f       	adc	r31, r31
    160c:	a2 17       	cp	r26, r18
    160e:	b3 07       	cpc	r27, r19
    1610:	e4 07       	cpc	r30, r20
    1612:	f5 07       	cpc	r31, r21
    1614:	20 f0       	brcs	.+8      	; 0x161e <__udivmodsi4_ep>
    1616:	a2 1b       	sub	r26, r18
    1618:	b3 0b       	sbc	r27, r19
    161a:	e4 0b       	sbc	r30, r20
    161c:	f5 0b       	sbc	r31, r21

0000161e <__udivmodsi4_ep>:
    161e:	66 1f       	adc	r22, r22
    1620:	77 1f       	adc	r23, r23
    1622:	88 1f       	adc	r24, r24
    1624:	99 1f       	adc	r25, r25
    1626:	1a 94       	dec	r1
    1628:	69 f7       	brne	.-38     	; 0x1604 <__udivmodsi4_loop>
    162a:	60 95       	com	r22
    162c:	70 95       	com	r23
    162e:	80 95       	com	r24
    1630:	90 95       	com	r25
    1632:	9b 01       	movw	r18, r22
    1634:	ac 01       	movw	r20, r24
    1636:	bd 01       	movw	r22, r26
    1638:	cf 01       	movw	r24, r30
    163a:	08 95       	ret

0000163c <_exit>:
    163c:	f8 94       	cli

0000163e <__stop_program>:
    163e:	ff cf       	rjmp	.-2      	; 0x163e <__stop_program>
